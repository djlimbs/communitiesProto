eval("(function() {\n\n// Add a labels property to every controller so that we don't have to access the global scope (which was deprecated).\nEmber.ControllerMixin.reopen({\n    labels: labels\n});\n\n// Attribute bindings for QA locators so we can easily add them to ember markup.\nEmber.View.reopen({\n    attributeBindings: ['data-dev', 'data-qa', 'data-qa-label', 'data-qa-button', 'data-qa-input', \n                        'data-qa-link', 'data-qa-pane', 'data-qa-select', 'da-qa-modal', 'data-qa-alert',\n                        'data-qa-container'],\n    didInsertElement : function(){\n        this._super();\n\n        Ember.run.scheduleOnce('afterRender', this, this.initJUI);   \n    },\n    initJUI: function() {\n        // Initialize tooltips if they exist. This might actually be expensive since it's run every time a new view is added. Will refactor.\n        /*if ($('[data-toggle=\"tooltip\"]').length > 0) {\n            $('body').tooltip({\n                selector: '[data-toggle=tooltip]'\n            });\n        }*/\n        this.afterRenderEvent();\n    },\n    afterRenderEvent : function() {\n        // implement this hook in your own subclasses and run your jQuery logic there\n    }\n});\n\n})();//@ sourceURL=../../js/emberBase.js")

eval("(function() {\n\nEmber.TEMPLATES[\"_channelLink\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var stack1, stack2, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n    <a href=\\\"\\\" class=\\\"setupNav__item__link\\\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"STRING\"};\n  options = {hash:{\n    'disabled': (\"shouldDisableLink\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\">\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"name\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n    </a>\\n\");\n  return buffer;\n  }\n\n  hashContexts = {'tagName': depth0,'classNames': depth0,'disabled': depth0,'data-qa-button': depth0};\n  hashTypes = {'tagName': \"STRING\",'classNames': \"STRING\",'disabled': \"ID\",'data-qa-button': \"STRING\"};\n  options = {hash:{\n    'tagName': (\"li\"),\n    'classNames': (\"list-group__item setupNav__item\"),\n    'disabled': (\"shouldDisableLink\"),\n    'data-qa-button': (\"integration\")\n  },inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"integration\", \"id\", options) : helperMissing.call(depth0, \"link-to\", \"integration\", \"id\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  else { data.buffer.push(''); }\n  \n});\n\nEmber.TEMPLATES[\"integration\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"successfulSaveMessage\", {hash:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"successfulSaveMessage\", {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n    \");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"canVerify\", {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                <div \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":alert isConnected:alert--success:alert--warning :mar--sm--bm\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" data-qa-alert=\\\"connectionStatus\\\">\\n                    <strong>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"connectionStatus\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</strong>\\n                </div>\\n            \");\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n            <div class=\\\"alert alert--success mar--sm--bm\\\" data-qa-alert=\\\"saveStatus\\\">\\n                <strong>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"successfulSaveMessage\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</strong>\\n            </div>\\n        \");\n  return buffer;\n  }\n\nfunction program7(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n        <div class=\\\"alert alert--error mar--sm--bm\\\"}} data-qa-alert=\\\"errorMessage\\\">\\n            <strong>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"errorMessage\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</strong>\\n        </div>\\n    \");\n  return buffer;\n  }\n\nfunction program9(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n            <div class=\\\"form__group\\\" data-qa-container=\\\"enable\\\">\\n                \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-checkbox': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-checkbox': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"isEnabled\"),\n    'data-qa-checkbox': (\"enable\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"<label for=\\\"cbEnableCredentials\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.enablePostingTo\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"name\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n            </div>\\n        \");\n  return buffer;\n  }\n\nfunction program11(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"field\", \"in\", \"authFields\", {hash:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\nfunction program12(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                <div class=\\\"form__group\\\" data-qa-container=\\\"field\\\">\\n                    <label for=\\\"\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"field.label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n                    \");\n  hashContexts = {'type': depth0,'placeholder': depth0,'value': depth0,'data-qa-input': depth0,'disabled': depth0};\n  hashTypes = {'type': \"ID\",'placeholder': \"STRING\",'value': \"ID\",'data-qa-input': \"STRING\",'disabled': \"ID\"};\n  options = {hash:{\n    'type': (\"field.inputType\"),\n    'placeholder': (\"\"),\n    'value': (\"field.value\"),\n    'data-qa-input': (\"field\"),\n    'disabled': (\"disableIntegrationHubInput\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n                    <small class=\\\"input-error-content\\\"></small>\\n                </div>\\n            \");\n  return buffer;\n  }\n\nfunction program14(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n            <div class=\\\"form__group connectedUsername\\\">\\n                <label class=\\\"block\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.username\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"iHSettingUserEmail\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n            </div>\\n        \");\n  return buffer;\n  }\n\nfunction program16(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"isIntegrationHub\", {hash:{},inverse:self.program(22, program22, data),fn:self.program(17, program17, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\nfunction program17(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                <button \");\n  hashContexts = {'class': depth0,'disabled': depth0};\n  hashTypes = {'class': \"STRING\",'disabled': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary :button--ghost isButtonDisabled:disabled isSaving:load-this\"),\n    'disabled': (\"isButtonDisabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickConnect\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"connect\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isSaving\", {hash:{},inverse:self.program(20, program20, data),fn:self.program(18, program18, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                </button>\\n            \");\n  return buffer;\n  }\nfunction program18(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.loading\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\n\nfunction program20(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.connect\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\n\nfunction program22(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"oauth\", {hash:{},inverse:self.program(38, program38, data),fn:self.program(23, program23, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n            \");\n  return buffer;\n  }\nfunction program23(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"isConnected\", {hash:{},inverse:self.program(29, program29, data),fn:self.program(24, program24, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                \");\n  return buffer;\n  }\nfunction program24(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                        <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--error :button--ghost isSaving:load-this\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" data-toggle=\\\"modal\\\" data-target=\\\"#disconnectModal\\\" data-qa-button=\\\"disconnect\\\">\\n                            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isSaving\", {hash:{},inverse:self.program(27, program27, data),fn:self.program(25, program25, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                        </button>\\n                        <!-- Disconnect Modal -->\\n                        <div class=\\\"modal fade\\\" id=\\\"disconnectModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"deleteModalLabel\\\" aria-hidden=\\\"true\\\">\\n                            <div class=\\\"modal__shell\\\">\\n                                <div class=\\\"modal__content\\\">\\n                                    <div class=\\\"modal__top\\\">\\n                                        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" data-qa-button=\\\"close\\\">\\n                                            <span class=\\\"close-modal-x\\\"></span>\\n                                            <span class=\\\"sr-only\\\" data-qa-label=\\\"close\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.close\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n                                        </button>\\n                                        <h2 class=\\\"modal__heading\\\" id=\\\"myModalLabel\\\" data-qa-label=\\\"title\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.modal_disconnect_title\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h2>\\n                                    </div>\\n                                    <div class=\\\"modal__body\\\" data-qa-label=\\\"body\\\">\\n                                        \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.modal_disconnect_body\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                                    </div>\\n                                    <div class=\\\"modal__footer\\\">\\n                                        <button type=\\\"button\\\" class=\\\"button button--secondary\\\"  data-dismiss=\\\"modal\\\" data-qa-button=\\\"cancel\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.cancel\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</button>\\n                                        <button \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickDisconnectOauth\", \"name\", {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" type=\\\"button\\\" class=\\\"button button--error\\\" data-dismiss=\\\"modal\\\" data-qa-button=\\\"ok\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.disconnect\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</button>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    \");\n  return buffer;\n  }\nfunction program25(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.loading\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            \");\n  return buffer;\n  }\n\nfunction program27(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.disconnect\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            \");\n  return buffer;\n  }\n\nfunction program29(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"socialAccounts\", {hash:{},inverse:self.program(35, program35, data),fn:self.program(30, program30, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\nfunction program30(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                            <div class=\\\"form__group\\\" data-qa-container=\\\"field\\\">\\n                                <label for=\\\"\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.facebook_dropdown_label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n                                <div class=\\\"select__wrap\\\">\\n                                    <div class=\\\"input__icon juicon juicon-down\\\"></div>\\n                                    \");\n  hashContexts = {'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'componentId': depth0,'data-qa-input': depth0,'value': depth0,'prompt': depth0};\n  hashTypes = {'content': \"ID\",'optionLabelPath': \"STRING\",'optionValuePath': \"STRING\",'componentId': \"ID\",'data-qa-input': \"STRING\",'value': \"ID\",'prompt': \"ID\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"select\", {hash:{\n    'content': (\"socialAccounts\"),\n    'optionLabelPath': (\"content.name\"),\n    'optionValuePath': (\"content.token\"),\n    'componentId': (\"field.componentId\"),\n    'data-qa-input': (\"socialAccounts\"),\n    'value': (\"socialAccountToken\"),\n    'prompt': (\"labels.select\")\n  },contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                                </div>\\n                                <small class=\\\"input-error-content\\\"></small>\\n                            </div>\\n                            <button \");\n  hashContexts = {'class': depth0,'disabled': depth0};\n  hashTypes = {'class': \"STRING\",'disabled': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary :button--ghost isButtonDisabled:disabled isSaving:load-this\"),\n    'disabled': (\"isButtonDisabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickSaveOauth\", \"name\", {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"save\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isSaving\", {hash:{},inverse:self.program(33, program33, data),fn:self.program(31, program31, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                            </button>\\n                        \");\n  return buffer;\n  }\nfunction program31(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                                    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.loading\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                                \");\n  return buffer;\n  }\n\nfunction program33(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                                    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.save\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                                \");\n  return buffer;\n  }\n\nfunction program35(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                            <button \");\n  hashContexts = {'class': depth0,'disabled': depth0};\n  hashTypes = {'class': \"STRING\",'disabled': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary :button--ghost isButtonDisabled:disabled isSaving:load-this\"),\n    'disabled': (\"isButtonDisabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickConnectOauth\", \"name\", {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"save\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isSaving\", {hash:{},inverse:self.program(36, program36, data),fn:self.program(31, program31, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                            </button>\\n                        \");\n  return buffer;\n  }\nfunction program36(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                                    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.connect\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                                \");\n  return buffer;\n  }\n\nfunction program38(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                    <button \");\n  hashContexts = {'class': depth0,'disabled': depth0};\n  hashTypes = {'class': \"STRING\",'disabled': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary :button--ghost isButtonDisabled:disabled isSaving:load-this\"),\n    'disabled': (\"isButtonDisabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickSave\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"save\\\">\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isSaving\", {hash:{},inverse:self.program(41, program41, data),fn:self.program(39, program39, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    </button>\\n                \");\n  return buffer;\n  }\nfunction program39(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.loading\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                        \");\n  return buffer;\n  }\n\nfunction program41(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.save\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                        \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"content__section\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"errorMessage\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"errorMessage\", {hash:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n    <div class=\\\"mar--md--ts\\\">\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"canDisable\", {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"showAuthFields\", {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"isIntegrationHubAndIsConnected\", {hash:{},inverse:self.noop,fn:self.program(14, program14, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"isIntegrationHubAndIsConnected\", {hash:{},inverse:self.noop,fn:self.program(16, program16, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"main\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  data.buffer.push(\"\\n                    System Connections\\n                \");\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  data.buffer.push(\"\\n                    Job Posting Configurations\\n                \");\n  }\n\nfunction program5(depth0,data) {\n  \n  \n  data.buffer.push(\"\\n                <div class=\\\"alert alert--warning mar--sm--bm\\\" data-qa-alert=\\\"errorMessage\\\">\\n                    <center><strong>Please contact your administrator and connect to the integration hub to enable job postings.</strong></center>\\n                </div>\\n            \");\n  }\n\nfunction program7(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                <div class=\\\"column--md--3\\\">\\n                    <div class=\\\"content__section\\\" data-qa-container=\\\"sidebar\\\">\\n                        <nav>\\n                            <ul id=\\\"setupNav\\\" class=\\\"list-group mar--sm--tn\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"isSystemPage\", {hash:{},inverse:self.program(11, program11, data),fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                            </ul>\\n                        </nav>\\n                    </div>\\n                </div>\\n                <div class=\\\"column--md--6\\\" data-qa-container=\\\"main\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"connectionMessage\", {hash:{},inverse:self.program(15, program15, data),fn:self.program(13, program13, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                </div>\\n            \");\n  return buffer;\n  }\nfunction program8(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes;\n  data.buffer.push(\"\\n                                    \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"systemDefaultChannels\", {hash:{\n    'itemController': (\"channelNav\")\n  },inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                                    \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"systemMappingChannels\", {hash:{\n    'itemController': (\"channelNav\")\n  },inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                                    \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"systemJobBoardChannels\", {hash:{\n    'itemController': (\"channelNav\")\n  },inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                                    \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"systemBgChannels\", {hash:{\n    'itemController': (\"channelNav\")\n  },inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                                \");\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                                        \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"channelLink\", options) : helperMissing.call(depth0, \"partial\", \"channelLink\", options))));\n  data.buffer.push(\"\\n                                    \");\n  return buffer;\n  }\n\nfunction program11(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes;\n  data.buffer.push(\"\\n                                    \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"jobPostingJobBoardChannels\", {hash:{\n    'itemController': (\"channelNav\")\n  },inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                                    \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"jobPostingSocialChannels\", {hash:{\n    'itemController': (\"channelNav\")\n  },inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                                \");\n  return buffer;\n  }\n\nfunction program13(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        <div class=\\\"alert alert--error mar--sm--bm\\\" data-qa-alert=\\\"errorMessage\\\">\\n                            <strong>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"connectionMessage\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</strong>\\n                        </div>\\n                    \");\n  return buffer;\n  }\n\nfunction program15(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"outlet\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"scope-container\\\">\\n    <div class=\\\"content pad--md--tm pad--md--bl pad--sm--only--n\\\">\\n        <nav id=\\\"integrationNav\\\" class=\\\"nav-bar--sf1 mar--sm--bn\\\">\\n            <button class=\\\"float--right-left button button--secondary mar--sm--only--ls hide-brkpoint--md\\\"><span class=\\\"juicon juicon-backward\\\"></span></button>\\n            <h2 class=\\\"nav-bar--sf1__subtitle page__subheading\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.talentObjects\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h2>\\n            <h1 class=\\\"nav-bar--sf1__title has-subtitle has-subheading page__heading\\\">\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"isSystemPage\", {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n            </h1>\\n        </nav>\\n        <hr class=\\\"show-brkpoint--md\\\">\\n        <div class=\\\"row\\\">\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"isJPNoConfig\", {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        </div>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"main/loading\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  \n\n\n  data.buffer.push(\"<div class=\\\"content__section\\\">\\n    <div class=\\\"load-block\\\">\\n        <div class=\\\"load-block-icon\\\"></div>\\n    </div>\\n</div>\");\n  \n});\n\n})();//@ sourceURL=app/templates.js")

eval("(function() {\n\nApp = Ember.Application.create({\n    rootElement: '#application'\n});\n\n// Controllers \n\nApp.MainController = Ember.ObjectController.extend({\n    init: function() {\n        this._super(); //Handle inheritance, etc...\n        //Ember.run.later(this, this.checkHealth, 2000);\n        if (this.isSuccess) {\n            this.checkHealth();\n        }\n    },\n    \n    systemDefaultChannels: Ember.computed.filter('channelData', function(item, index, array) {\n        return item.type == 'Default' && item.configurationPage == 'System';\n    }),\n    systemMappingChannels: Ember.computed.filter('channelData', function(item, index, array) {\n        return item.type == 'Mapping' && item.configurationPage == 'System';\n    }),\n    systemJobBoardChannels: Ember.computed.filter('channelData', function(item, index, array) {\n        return item.type == 'Job Board' && item.configurationPage == 'System';\n    }),\n    systemBgChannels: Ember.computed.filter('channelData', function(item, index, array) {\n        return item.type == 'Background Check' && item.configurationPage == 'System';\n    }),\n    \n    jobPostingJobBoardChannels: Ember.computed.filter('channelData', function(item, index, array) {\n        return item.type == 'Job Board' && item.configurationPage == 'Job Posting';\n    }),\n    jobPostingSocialChannels: Ember.computed.filter('channelData', function(item, index, array) {\n        return item.type == 'Social' && item.configurationPage == 'Job Posting';\n    }),\n\n    checkHealth: function() {\n        var self = this;\n\n        cont.checkHealth(function(res, resObj) {\n            if (!Ember.isNone(self.get('content'))) {\n                if (res) {\n                    var parsedResult = parseResult(res);\n                    \n                    self.set('connectionerror', labels.connectionError);\n                    if (Ember.isEmpty(parsedResult.errorMessages) && parseResult(parsedResult.data.response).status == 'UP') {\n                        self.set('connectionerror', null);\n                        self.set('connectionMessage', self.get('connectionerror'));\n                    } else {\n                        self.set('connectionMessage', self.get('connectionerror'));\n                        $(window).scrollTop(0);\n                    }\n                } else { // Not often used...\n                    self.set('connectionMessage', 'Drastic error.');\n                    $(window).scrollTop(0);\n                }\n            }\n        });\n        \n    },\n    checkHealthPromise: function() {\n        var self = this;\n\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n\n            cont.checkHealth(function(res, resObj) {\n                if (res) {\n                    var parsedResult = parseResult(res);\n                \n                    if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                        self.set('connectionerror', 'Connection error: please contact your system administrator if this persists.');\n                        self.set('connectionMessage', self.get('connectionerror'));\n                        $(window).scrollTop(0);\n                        reject(self);\n\n                    } else {\n                        self.set('connectionerror', 'Connection error: please contact your system administrator if this persists.');\n\n                        var subParse = parseResult(parsedResult.data.response);\n\n                        if( subParse.status == 'UP') {\n                            self.set('connectionerror', null);\n                            self.set('connectionMessage', self.get('connectionerror'));\n                            resolve(self);\n\n                        } else {\n                            self.set('connectionMessage', self.get('connectionerror'));\n                            $(window).scrollTop(0);\n                            reject(self);\n                        }\n                \n                    }\n\n                } else { // Not often used...\n                    self.set('connectionMessage', 'Drastic error.');\n                    $(window).scrollTop(0);\n                    reject(self);\n                }\n            });\n\n        });\n\n    },    \n    gotoObject: function(self) {\n        var objectId = self.model.data.jobPosting.Id;\n        if(isSF1) {\n            sforce.one.navigateToSObject(objectId);\n        } else {\n            window.location.href = '/' + objectId;\n        }\n    },\n    handleError: function(self) {\n        self.set('errorMessage', self.get('error'));\n        $(window).scrollTop(0);\n    },\n    actions: {\n        clearInput: function(input) {\n            this.set(input, null);\n        }\n    }\n});\n\nApp.ChannelNavController = Ember.ObjectController.extend({\n    needs: ['main'],\n    isHubConnectedBinding: 'controllers.main.isHubConnected',\n    shouldDisableLink: function() {\n        return this.get('hubRequired') === true && this.get('isHubConnected') !== true ? 'Disabled' : false;\n    }.property('hubRequired', 'isHubConnected')\n});\n\nApp.IntegrationController = Ember.ObjectController.extend({\n    needs: ['main'],\n    clientIdBinding: 'controllers.main.clientId',\n    clientSecretBinding: 'controllers.main.clientSecret',\n    isHubConnectedBinding: 'controllers.main.isHubConnected',\n    iHSettingUserEmailBinding: 'controllers.main.iHSettingUserEmail',\n    isIntegrationHubAndIsConnected: function() {\n        return this.get('isIntegrationHub') === true && this.get('isHubConnected') === true;\n    }.property('isIntegrationHub', 'isHubConnected'),\n    disableIntegrationHubInput: function() {\n        return this.get('isIntegrationHubAndIsConnected') === true ? 'Disabled' : false;\n    }.property('isIntegrationHubAndIsConnected'),\n    connectionStatus: function() {\n        return this.get('isConnected') === true ? labels.connectionSuccessfullyEstablished : labels.connectionNotEstablished;\n    }.property('isConnected'),\n    showAuthFields: function() {\n        return !Ember.isEmpty(this.get('authFields')) && \n                    (this.get('canDisable') === false || this.get('isEnabled') === true);\n    }.property('canDisable', 'isEnabled', 'authFields'),\n    enabledDidChange: function() {\n        var authFields = this.get('authFields');\n        var authFieldsValues = !Ember.isEmpty(authFields) ? authFields.getEach('value').compact() : null;\n        \n        if (this.get('isEnabled') === true && this.get('canVerify') === true \n                    && !Ember.isEmpty(authFieldsValues) && this.get('isIntegrationHub') !== true) {\n            this.verify()\n                .then(undefined, this.handleError);\n        }\n    }.observes('isEnabled'),\n    isButtonDisabled: function() {\n        var authFields = this.get('authFields') || [];\n        var populatedFields = authFields.getEach('value').reject(function(val) {\n            return Ember.isEmpty(val);\n        });\n\n        return populatedFields.length !== authFields.length ? 'disabled' : false\n                    || this.get('isSaving') === true;\n    }.property('authFields.@each.value', 'isSaving'),\n    actions: {\n        clickConnect: function() {\n            this.set('isSaving', true);\n            this.validateFields()\n                .then(this.verifyAndSave)\n                .then(this.navigateToIntegrationHubOauth)\n                .then(undefined, this.handleError);\n        },\n        clickSave: function() {\n            this.set('isSaving', true);\n            this.validateFields()\n                .then(this.verifyAndSave)\n                .then(undefined, this.handleError);\n        },\n        clickConnectOauth: function() {\n            this.set('isSaving', true);\n            this.validateFields()\n                .then(this.performOauth)\n                .then(undefined, this.handleError);\n        },\n        clickSaveOauth: function() {\n            this.set('isSaving', true);\n            \n            var socialAccount = this.get('socialAccounts').findBy('token', this.get('socialAccountToken'));\n            \n            this.set('saveObj', {\n                Id: this.get('customSettingId'),\n                Name: this.get('name'),\n                Enabled__c: this.get('isEnabled'),\n                Field1__c: socialAccount.token,\n                Field2__c: socialAccount.id,\n                Field3__c: socialAccount.name\n            });\n            \n            this.validateFields()\n                .then(this.saveCustomSetting)\n                .then(undefined, this.handleError)\n        },\n        clickDisconnectOauth: function() {\n            this.disconnectOauth()\n                .then(undefined, this.handleError);\n        }\n    },\n    disconnectOauth: function() {\n        var self = this;\n        \n        return new Ember.RSVP.Promise(function(resolve, reject) {\n            cont.removeIntegrationHubSetting(self.get('name'),  function(removeRes, removeResObj) {\n                self.setProperties({\n                    customSettingId: null,\n                    icSetting: null,\n                    authFields: [],\n                    isEnabled: false,\n                    isConnected: false\n                });\n\n                if (removeRes) {\n                    resolve(self);\n                } else {\n                    self.set('errorMessage', labels.pleaseContactTechnicalSupport);\n                    reject(self);\n                }\n\n            });\n        });\n    },\n    validateFields: function() {\n        // Hook to perform validation if needed.\n\n        var self = this;\n\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n            resolve(self);\n        });\n    },\n    verify: function() {\n        var self = this;\n\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n            // Build verify object\n            var verifyObj = {\n                isOauth: self.get('oauth'),\n                name: self.get('name'),\n                values: self.get('authFields').getEach('value')\n            };\n\n            cont.verify(JSON.stringify(verifyObj), function(res, resObj) {\n                if (res) {\n                    var parsedResult = parseResult(res);\n\n                    if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                        self.setProperties({\n                            error: parsedResult.errorMessages[0],\n                            isConnected: false\n                        });\n                        reject(self);\n                    } else {\n                        self.setProperties({\n                            isConnected: self.get('isEnabled'),\n                            errorMessage: null\n                        });\n\n                        resolve(self);\n                    }\n                } else {\n                    self.setProperties({\n                        error: labels.pleaseContactTechnicalSupport,\n                        isConnected: false\n                    });\n                    reject(self);\n                }\n            });\n        });\n    },\n    verifyAndSave: function(self) {\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n            // Build object to send to backend for verification + saving\n            var verifyAndSaveObj = {};\n\n            // Build verify object\n            var verifyObj = {\n                isOauth: self.get('oauth'),\n                name: self.get('name'),\n                values: self.get('authFields').getEach('value')\n            };\n\n            // Only verify if canVerify is true, it's not for Integration Hub and the integration is enabled.\n            // Do NOT verify for Integration Hub as that is a special case.\n            var shouldVerify = self.get('type') !== 'Default' && \n                                    self.get('canVerify') === true && self.get('isEnabled') === true;\n            // Build custom setting object\n            var saveObj = {\n                Id: self.get('customSettingId'),\n                Name: self.get('name'),\n                Enabled__c: self.get('isEnabled'),\n                User__c: self.get('type') === 'Default' ? userId : 'Default'\n            };\n\n            self.get('authFields').forEach(function(af, index) {\n                var fieldKey = 'Field' + parseInt(index + 1) + '__c';\n                saveObj[fieldKey] = af.value;\n            });\n\n            verifyAndSaveObj.saveObj = saveObj;\n            verifyAndSaveObj.verifyObj = verifyObj;\n\n            cont.verifyAndSave(JSON.stringify(verifyAndSaveObj), shouldVerify, function(res, resObj) {\n                if (res) {\n                    var parsedResult = parseResult(res);\n\n                    if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                        self.setProperties({\n                            error: parsedResult.errorMessages[0],\n                            isConnected: false,\n                            isSaving: false\n                        });\n                        reject(self);\n                    } else {\n                        self.setProperties({\n                            isConnected: self.get('isEnabled'),\n                            customSettingId: parsedResult.data.integrationCredential.Id,\n                            errorMessage: null,\n                            tempModel: JSON.parse(JSON.stringify(self.get('model')))\n                        });                        \n\n                        if (self.get('canVerify') === false || self.get('isEnabled') === false) {\n                            self.set('successfulSaveMessage', labels.yourChangesHaveBeenSaved);\n                        }\n\n                        self.set('isSaving', false);\n\n                        resolve(self);\n                    }\n                } else {\n                    self.setProperties({\n                        error: resObj.message,\n                        isConnected: false,\n                        isSaving: false\n                    });\n                    reject(self);\n                }\n            });\n        });\n    },\n    navigateToIntegrationHubOauth: function(self) {\n        var redirectUri;\n\n        if (!Ember.isEmpty(extvfnamespace)) {\n            redirectUri = 'http://login.salesforce.com/apex/' + extvfnamespace + '__to_creds?type=Default';\n        } else {\n            redirectUri = 'http://login.salesforce.com/apex/to_creds?type=Default';\n        }\n\n        var clientId = self.get('authFields')[0].value;\n        var authUrl = 'https://login.salesforce.com/services/oauth2/authorize?response_type=code&client_id='\n                        + clientId + '&redirect_uri=' + redirectUri;\n\n        window.location.href = authUrl;\n    },\n    performOauth: function(self) {\n        var redirectUri, url = routeUri + 'connect/' + self.get('name').toLowerCase();\n        \n        redirectUri = window.location.href = window.location.href.split('?')[0] + '?name=' + self.get('name');\n        \n        $form = $('<form action=\"' + url + '\" method=\"post\"></form>');\n        $form.append('<input name=\"url\" type=\"text\" value=\"' + redirectUri + '\" />');\n        if (self.get('name') == 'Facebook') {\n            $form.append('<input name=\"scope\" type=\"text\" value=\"manage_pages, publish_actions\" />');\n        } else if (self.get('name') == 'LinkedIn') {\n            $form.append('<input name=\"scope\" type=\"text\" value=\"rw_company_admin\" />');\n        }\n        $('body').append($form);\n        $form.submit();\n    },\n    saveCustomSetting: function(self) {\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n            var saveMap = {\n                verifyObj: {},\n                saveObj: self.get('saveObj')\n            }\n            cont.verifyAndSave(JSON.stringify(saveMap), false, function(saveRes, saveResObj) {\n                window.location.href = window.location.href.split('?')[0] + '?name=' + self.get('saveObj').Name;\n            });\n        });\n    },\n    handleError: function(self) {\n        var error = self.get('error');\n\n        self.set('errorMessage', error);\n    }\n});\n\n// Routes\n\nApp.MainRoute = Ember.Route.extend({\n    model: function () {\n        var self = this;\n\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n            var pageData = JSON.parse(rawPageData);\n            var currentICSettings = JSON.parse(icSettings);\n\n            // Check for error conditions\n            if (!pageData.isSuccess) {\n                // This contains the error conditions.\n                pageData.connectionMessage = pageData.errorMessages[0];\n\n                resolve(pageData); // This is the object.\n            }\n            \n            // Process Channel Data to make it easier to find and separate from actual page data.\n            pageData.isSystemPage = isSystemPage;\n            pageData.isJPNoConfig = !(pageData.isSystemPage || pageData.isHubConnected);\n\n            var channelData = JSON.parse(pageData.data.channelData);\n            pageData.data.channelData = ''; // Clear it out after we get it. (Keep it from submitting to the back-end)\n\n            pageData.channelData = channelData._embedded.channels.sortBy('name');\n\n            // Check if the Integration Hub is setup, as some channel data depend on it.\n            var channelDataIntegrationHubSetting = pageData.channelData.findBy('type', 'Default');\n            var integrationHubSettingName = !Ember.isEmpty(channelDataIntegrationHubSetting) ? channelDataIntegrationHubSetting.name : null;\n\n            cont.getIntegrationHubSetting(integrationHubSettingName, function(res, resObj) {\n                if (res) {\n                    var parsedResult = parseResult(res);\n                    if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                        // Didn't find Integration Hub setting, it's OK.\n                        //pageData.isHubConnected = false;\n                    } else {\n                        var integrationHubSetting = parsedResult.data.iHSettingObj.iHSetting;\n                        if (!Ember.isEmpty(integrationHubSetting)) {\n                            //pageData.isHubConnected = true;\n                            pageData.clientId = integrationHubSetting.Field1__c;\n                            pageData.clientSecret = integrationHubSetting.Field2__c;\n                            pageData.iHSettingUserEmail = parsedResult.data.iHSettingObj.userEmail;\n\n                            currentICSettings.addObject(integrationHubSetting);\n                        } else {\n                            //pageData.isHubConnected = false;\n                        }\n                    }\n                } else {\n                    //pageData.isHubConnected = false;\n                }\n\n                // Iterate through each channel data to properly format the required fields,\n                // and populated them if a stored value is found from the custom settings.\n\n                pageData.channelData.forEach(function(cd) {\n                    if (Ember.isEmpty(cd.authParams)) {\n                        cd.authParams = Ember.A();\n                    }\n                    // Check the Integration Credential settings we pulled back if we have one for this channel data.\n                    var icSettingForField = currentICSettings.findBy('Name', cd.name);\n\n                    cd.authFields = [];\n\n                    cd.authParams.forEach(function(ap, index) {\n                        // Values in the custom setting are stored as Field1, Field2, Field3 so we can use the iterator to create the key.\n                        var fieldKey = 'Field' + parseInt(index + 1) + '__c';\n\n                        var authField = {\n                            label: ap,\n                            value: !Ember.isNone(icSettingForField) ? icSettingForField[fieldKey] : null,\n                            inputType: ap === 'Consumer Secret' || ap.toLowerCase() === 'password' ? 'password' : 'text' // Hard coding password field for Integration Hub\n                        };\n\n                        cd.authFields.addObject(authField);\n\n                    });\n                    \n                    if (!Ember.isNone(icSettingForField)) {\n                        cd.customSettingId = icSettingForField.Id;\n                        cd.isConnected = cd.canDisable === false || icSettingForField.Enabled__c; // Only connect if enabled.\n                        cd.isEnabled = icSettingForField.Enabled__c;\n                        cd.icSetting = icSettingForField;   // Used to access other fields from the custom setting, such as refresh token on Integration Hub.\n                    } else {\n                        cd.isConnected = false;\n                    }\n                    \n                });\n\n                resolve(pageData); // This is the object.\n            });\n        });\n    },\n    afterModel: function(model, transition, queryParams) {\n        if (model.isSuccess) {\n            var integrationHub = model.channelData.findBy('name', 'Integration Hub');\n            this.transitionTo('integration', integrationHub.id);\n        }\n    }\n});\n\nApp.IntegrationRoute = Ember.Route.extend({\n    model: function(params) {\n        var self = this;\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n\n            var integration = self.modelFor('main').channelData.findBy('id', params.id);\n\n            if (errorParam === 'access_denied') {\n                // If coming back from connected app oauth with an error\n\n                integration.isConnected = false;\n\n                cont.removeIntegrationHubSetting(integration.name, function(removeRes, removeResObj) {\n                    // Clear out the Integration Hub data\n\n                    integration.customSettingId = null;\n                    integration.icSetting = null;\n                    integration.authFields.forEach(function(af) {\n                        af.value = null;\n                    });\n\n                    if (removeRes) {\n                        integration.errorMessage = labels.pleaseEnsureYouAllowAccess;\n                    } else {\n                        integration.errorMessage = labels.pleaseContactTechnicalSupport;\n                    }\n\n                    resolve(integration);\n                });\n            } else if (!Ember.isEmpty(token1Param)) {\n                if (nameParam == TWITTER_CHANNEL_NAME && !Ember.isEmpty(token2Param)) {\n                    var twitterSettings = self.modelFor('main').channelData.findBy('name', nameParam);\n                    var twitterSettingsId = twitterSettings ? twitterSettings.Id : null;\n\n                    var verifyObj = {\n                        isOauth: twitterSettings.oauth,\n                        name: twitterSettings.name,\n                        values: [token1Param, token2Param]\n                    };\n\n                    cont.verify(JSON.stringify(verifyObj), function(res, resObj) {\n                        if (res) {\n                            var parsedResult = parseResult(res);\n                            if (parsedResult.isSuccess) {\n                                var saveMap = {\n                                    verifyObj: {},\n                                    saveObj: {\n                                        Id: twitterSettingsId,\n                                        Name: nameParam,\n                                        Field1__c: token1Param,\n                                        Field2__c: token2Param,\n                                        Field3__c: parsedResult.data.socialAccounts[0].name,\n                                        Enabled__c: true\n                                    }\n                                };\n\n                                cont.verifyAndSave(JSON.stringify(saveMap), false, function(saveRes, saveResObj) {\n                                    window.location.href = window.location.href.split('?')[0] + '?name=' + nameParam;\n                                });\n                            } else {\n                                integration.errorMessage = parsedResult.errorMessages[0];\n                                resolve(integration);\n                            }\n                        } else {\n                            integration.errorMessage = resObj.errorMessages[0];\n                            resolve(integration);\n                        }\n                    });\n                } else if (nameParam && nameParam != TWITTER_CHANNEL_NAME) {\n                    var channelSettings = self.modelFor('main').channelData.findBy('name', nameParam);\n                    var channelSettingsId = channelSettings ? channelSettings.Id : null;\n\n                    var verifyObj = {\n                        isOauth: channelSettings.oauth,\n                        name: channelSettings.name,\n                        values: [null, null, token1Param]\n                    };\n\n                    cont.verify(JSON.stringify(verifyObj), function(res, resObj) {\n                        if (res) {\n                            var parsedResult = parseResult(res);\n                            if (parsedResult.isSuccess) {\n                                var channel = self.modelFor('main').channelData.findBy('name', nameParam);\n                                if (channel) {\n                                    channel.socialAccounts = parsedResult.data.socialAccounts;\n                                    channel.socialAccountToken = '';\n                                }\n                                resolve(integration);\n                            } else {\n                                integration.errorMessage = parsedResult.errorMessages[0];\n                                resolve(integration);\n                            }\n                        } else {\n                            integration.errorMessage = resObj.errorMessages[0];\n                            resolve(integration);\n                        }\n                    });\n                } else {\n                    // window.location.href = window.location.href.split('?')[0];\n                    return;\n                }\n            } else if (typeParam === 'Default' && !Ember.isEmpty(codeParam)) {\n                // If coming back from connected app oauth, ping the hub to verify.\n\n                nameParam = '';\n\n                cont.verifyIntegrationHub(integration.name, codeParam, function(iHRes, iHResObj) {\n                    if (iHRes) {\n                        var ihParsedResult = parseResult(iHRes);\n                        if (!Ember.isEmpty(ihParsedResult.errorMessages)) {\n                            integration.errorMessage = ihParsedResult.errorMessages[0];\n                            integration.isConnected = false;\n\n                            resolve(integration);\n                        } else {\n                            if (ihParsedResult.data.isValid === true) {\n                                integration.isConnected = true;\n\n                                var customSettingObj = {\n                                    Id: integration.customSettingId,\n                                    Field3__c: ihParsedResult.data.refreshToken\n                                };\n                                // Save down refresh token and reload route.\n\n                                var saveMap = {\n                                    verifyObj: {},\n                                    saveObj: customSettingObj\n                                };\n\n                                cont.verifyAndSave(JSON.stringify(saveMap), false, function(saveRes, saveResObj) {\n                                    if (saveRes) {\n                                        window.location.href = window.location.href.split('?')[0];\n                                    } else {\n                                        window.location.href = window.location.href.split('?')[0];\n                                    }\n                                });\n\n                            } else {\n                                integration.isConnected = false;\n\n                                // If verify for integration hub failed, we want to wipe out the custom setting.\n                                cont.removeIntegrationHubSetting(integration.name, function(removeRes, removeResObj) {\n                                    integration.customSettingId = null;\n                                    integration.icSetting = null;\n                                    integration.authFields.forEach(function(af) {\n                                        af.value = null;\n                                    });\n                                    \n                                    if (removeRes) {\n                                        integration.errorMessage = labels.pleaseDoubleCheckTheCredentials;                                        \n                                    } else {\n                                        integration.errorMessage = labels.pleaseContactTechnicalSupport;\n                                    }\n\n                                    resolve(integration);\n                                });\n                            }\n\n                        }\n                    } else {\n                        integration.isConnected = false;\n                        integration.customSettingId = null;\n                        integration.icSetting = null;\n                        integration.authFields.forEach(function(af) {\n                            af.value = null;\n                        });\n                        integration.errorMessage = labels.pleaseContactTechnicalSupport;  \n\n                        resolve(integration);\n                    }\n                });\n            } else if (integration.type === 'Default') {\n                // Always verify refresh token is valid when hitting Integration Hub route\n                var refreshToken = !Ember.isNone(integration.icSetting) ? integration.icSetting.Field3__c : null;\n                \n                if (!Ember.isEmpty(refreshToken)) {\n                    cont.verifyRefreshToken(integration.name, refreshToken, function(rtRes, rtResObj) {\n                        if (rtRes) {\n                            var rtParsedResult = parseResult(rtRes);\n\n                            if (!Ember.isEmpty(rtParsedResult.errorMessages)) {\n                                integration.errorMessage = rtParsedResult.errorMessages[0];\n                                integration.isConnected = false;\n\n                                resolve(integration);\n                            } else {\n                                if (rtParsedResult.data.isValid === true) {\n                                    integration.isConnected = true;\n                                    \n                                    resolve(integration);\n                                } else {\n                                    integration.isConnected = false;\n                                    integration.icSetting.Field3__c = null;\n                                    integration.customSettingId = null;\n                                    integration.icSetting = null;\n                                    integration.authFields.forEach(function(af) {\n                                        af.value = null;\n                                    });\n\n                                    cont.removeIntegrationHubSetting(integration.name, function(removeRes, removeResObj) {\n                                        if (removeRes) {\n                                            // Clear out the Integration Hub data\n                                            integration.errorMessage = labels.pleaseConnectTotheIHAgain;\n                                        } else {\n                                            integration.errorMessage = labels.pleaseContactTechnicalSupport;  \n                                        }\n\n                                        resolve(integration);\n                                    });\n                                }\n                            }\n                        } else {\n                            integration.isConnected = false;\n                            integration.icSetting.Field3__c = null;\n                            integration.customSettingId = null;\n                            integration.icSetting = null;\n                            integration.authFields.forEach(function(af) {\n                                af.value = null;\n                            });\n\n                            integration.errorMessage = labels.pleaseContactTechnicalSupport;  \n\n                            resolve(integration);\n                            // VF remoting error handling\n                        }\n                    });\n                } else {\n                    // If we don't have a refresh token, we aren't connected.\n                    // Delete any existing Integration Hub custom setting then move on.\n                    integration.isConnected = false;\n\n                    if (!Ember.isEmpty(integration.customSettingId)) {\n                        cont.removeIntegrationHubSetting(integration.name, function(removeRes, removeResObj) {\n                            if (removeRes) {\n                                window.location.href = window.location.href.split('?')[0];\n                            } else {\n                                window.location.href = window.location.href.split('?')[0];\n                            }\n                        });\n                    } else {\n                        resolve(integration);\n                    }\n                }\n            } else {\n                resolve(integration);\n            }\n        }); \n    },\n    setupController: function(controller, model) {\n        controller.setProperties({\n            model: model,\n            isIntegrationHub: model.type == 'Default',\n            errorMessage: model.errorMessage,\n            successfulSaveMessage: null,\n            tempModel: JSON.parse(JSON.stringify(model))\n        });\n\n        if (model.type === 'Default') {\n            this.controllerFor('main').set('isHubConnected', model.isConnected);\n        }\n        \n        // predetermined channel?\n        if (firstLoad) {\n            if (model.isConnected && nameParam && typeParam != 'Default') {\n                var integrationHub = this.modelFor('main').channelData.findBy('name', nameParam);\n                if (integrationHub) {\n                    this.transitionTo('integration', integrationHub.id);\n                    firstLoad = false;\n                }\n            } else {\n                if (!isSystemPage) {\n                    // try to set to first job board\n                    var firstChannel = this.modelFor('main').channelData.find(function(item) {\n                        return item.type == 'Job Board' && item.configurationPage == 'Job Posting';\n                    });\n                    if (firstChannel) {\n                        this.transitionTo('integration', firstChannel.id);\n                        firstLoad = false;\n                    } else {\n                        // try to set to first social\n                        firstChannel = this.modelFor('main').channelData.find(function(item) {\n                            return item.type == 'Social' && item.configurationPage == 'Job Posting';\n                        });\n                        if (firstChannel) {\n                            this.transitionTo('integration', firstChannel.id);\n                            firstLoad = false;\n                        }\n                    }\n                }\n            }\n        }\n    },\n    actions: {\n        willTransition: function(transition) {\n            var tempModel = this.controller.get('tempModel');\n\n            var cancelObj = {\n                isEnabled: tempModel.isEnabled,\n                authFields: tempModel.authFields\n            };\n\n            this.controller.setProperties(cancelObj);\n        }\n    }\n});\n\nApp.Router.map(function(){\n    this.resource('main', {path: '/'}, function() {\n        this.resource('integration', { path: '/:id' });\n    });\n});\n\n// This setting disables the detail routing from showing up in the navbar.\nApp.Router.reopen( {\n    location: 'none'\n});\n\n})();//@ sourceURL=app/to_creds.js")

eval("(function() {\n\n// Standard JUI date picker component\n// Usage: {{date-picker value=[date value to bind to your controller]}}\nApp.DatePickerComponent = Ember.Component.extend({\n    attributeBindings: ['includeToday', 'disabled'],\n    layoutName: 'components/datepicker',\n    didInsertElement: function() {\n\n        var self = this\n            , dateValue = this.get('value')\n            , disabled = this.get('disabled')\n            , currentDate = moment()\n            , includeToday = this.get('includeToday')\n            , $element = this.$()\n            , $datepicker = $element.find('.datepicker')\n            , $input = $element.find('input')\n            , locale = typeof localeString === 'undefined' ? 'YYYY-MM-DD' : localeString;\n\n            $datepicker.datepicker({\n                    format: locale.toLowerCase(),\n                    onRender: function(date) {\n                        if (disabled === true) {\n                            return 'disabled';\n\n                        } else {\n                            if (includeToday === true) \n                                return date.valueOf() < moment(currentDate).subtract('days', 1).valueOf() ? 'disabled' : '';\n                        }\n                    }\n                })\n                .on('changeDate', function(event) {\n                    self.set('value', moment(event.date).format('YYYY-MM-DD'));\n                    $input.val(moment(event.date).format(locale));\n                   \n                    $datepicker.datepicker('hide');\n                })\n                // .datepicker('setValue', moment(dateValue).toDate());\n\n            if (!Ember.isNone(dateValue)) {\n                $input.val(moment(dateValue).format(locale));\n                $datepicker.datepicker('setValue', moment(dateValue).toDate());\n            }\n    }\n});\n\n// Salesforce Rich Text Editor component\n// Usage: In the body tag of the VF page you are editing, insert an apex rich text tag inside a div with id 'richTextForm'\n// then in your template: {{rich-text componentId=[this elements id if you need it] value=[rich text to bind to your controller]}}\n// Attributes:\n// componentId - This is the Id of the element you have created, can be useful if you need to jQuery for it.\n// bindingType - You can specify the component to bind its 'value' property to the 'html' or 'text' content of the rich text field.\n//               If unspecified, it will not bind at all.\n// autofocus - Whether the cursor should autofocus on the component when it is added to the DOM.\nApp.RichTextComponent = Ember.Component.extend({\n    attributeBindings: ['componentId', 'bindingType', 'autofocus', 'height'],\n    previousContent: '',\n    didInsertElement: function() {\n        var self = this\n            , richTextForm= $('#richTextForm')\n            , value = this.get('value')\n            , bindingType = this.get('bindingType')\n            , autofocus = this.get('autofocus')\n            , height = this.get('height')\n            , pollCounter = 0; // We should set a max amount of polling incase the component launches but the user switches the view right away.\n\n        richTextForm.find('.cke').remove();\n        this.$().append(richTextForm.html());\n        this.set('componentId', this.get('elementId'));\n\n        // We have to constantly poll for Salesforce to finish rendering the rich text field before updating its value.\n        var pollForRTF = setInterval(function(){ \n            pollCounter++;\n\n            if (pollCounter > 50) {\n                clearInterval(pollForRTF);\n            }\n\n            if (!Ember.isEmpty(self.$())) { // A little more checking in case user navigates to another view right away\n                var rtfField = self.$().find('iframe').contents();\n\n                if (rtfField.length > 0 && rtfField.find('body').length > 0) {\n                    clearInterval(pollForRTF);\n                    \n                    // This run later and re-finding of the body is a mod to make the RTF values populate in Firefox\n                    Ember.run.later(this, function() {\n                        if (!Ember.isEmpty(self.$())) { // A little more checking in case user navigates to another view right away\n                        \n                            var rtfBody = self.$().find('iframe').contents().find('body');\n                            if (autofocus === true) {\n                                rtfBody.focus();\n                            }\n\n                            if (!Ember.isNone(value)) {\n                                rtfBody.html(value);\n                            }\n                            \n                            if (!Ember.isNone(height)) {\n                                self.$().find('.cke_contents').height(height);\n                            }\n\n                            if (bindingType === 'html') {\n                                rtfBody.keyup(function(e) {\n                                    var richText = $(e.target);\n\n                                    richText.find('[style]').removeAttr('style');\n                                    richText.find('[class]').removeAttr('class');\n\n                                    var currentContent = richText.html();\n                                    var previousContent = self.get('previousContent');\n\n                                    self.set('value', currentContent);\n                                    self.set('previousContent', currentContent);\n                                });\n                            } else if (bindingType === 'text') {\n                                rtfBody.keyup(function(e) {\n                                    var richText = $(e.target);\n\n                                    richText.find('[style]').removeAttr('style');\n                                    richText.find('[class]').removeAttr('class');\n\n                                    var currentContent = richText.html();\n                                    var previousContent = self.get('previousContent');\n\n                                    self.set('value', e.target.textContent);\n                                    self.set('previousContent', currentContent);\n                                });\n                            }\n                        }\n                    }, 300);\n                }\n            }\n        }, 300);\n    }\n});\n\n})();//@ sourceURL=../../js/emberComponents.js")