eval("(function() {\n\n// Add a labels property to every controller so that we don't have to access the global scope (which was deprecated).\nEmber.ControllerMixin.reopen({\n    labels: labels\n});\n\n// Attribute bindings for QA locators so we can easily add them to ember markup.\nEmber.View.reopen({\n    attributeBindings: ['data-dev', 'data-qa', 'data-qa-label', 'data-qa-button', 'data-qa-input', \n                        'data-qa-link', 'data-qa-pane', 'data-qa-select', 'da-qa-modal', 'data-qa-alert',\n                        'data-qa-container'],\n    didInsertElement : function(){\n        this._super();\n\n        Ember.run.scheduleOnce('afterRender', this, this.initJUI);   \n    },\n    initJUI: function() {\n        // Initialize tooltips if they exist. This might actually be expensive since it's run every time a new view is added. Will refactor.\n        /*if ($('[data-toggle=\"tooltip\"]').length > 0) {\n            $('body').tooltip({\n                selector: '[data-toggle=tooltip]'\n            });\n        }*/\n        this.afterRenderEvent();\n    },\n    afterRenderEvent : function() {\n        // implement this hook in your own subclasses and run your jQuery logic there\n    }\n});\n\n})();//@ sourceURL=../js/emberBase.js")

eval("(function() {\n\nEmber.TEMPLATES[\"_checkbox\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  data.buffer.push(\"<div class=\\\"column--md--12\\\">\\n    <div class=\\\"form__group mar--md--bn mar--md--tm\\\">\\n        <label data-qa-label=\\\"fieldName\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"field.label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n        <div class=\\\"input-size\\\">\\n            \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"field.value\"),\n    'data-qa-input': (\"checkbox\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n        </div>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_date\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  data.buffer.push(\"<div class=\\\"column--md--6\\\">\\n    <div class=\\\"form__group mar--md--bn mar--md--tm\\\">\\n        <label data-qa-label=\\\"fieldName\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"field.label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n        \");\n  hashContexts = {'value': depth0};\n  hashTypes = {'value': \"ID\"};\n  options = {hash:{\n    'value': (\"field.value\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['date-picker'] || (depth0 && depth0['date-picker'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"date-picker\", options))));\n  data.buffer.push(\"\\n        <small class=\\\"input-error-content\\\"></small>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_picklist\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<div class=\\\"column--md--6\\\">\\n    <div class=\\\"form__group mar--md--bn mar--md--tm\\\">\\n        <label data-qa-label=\\\"fieldName\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"field.label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n        <div class=\\\"select__wrap\\\">\\n            <div class=\\\"input__icon juicon juicon-down\\\"></div>\\n            \");\n  hashContexts = {'content': depth0,'optionLabelPath': depth0,'optionValuePath': depth0,'value': depth0,'prompt': depth0,'data-qa-input': depth0};\n  hashTypes = {'content': \"ID\",'optionLabelPath': \"STRING\",'optionValuePath': \"STRING\",'value': \"ID\",'prompt': \"STRING\",'data-qa-input': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"select\", {hash:{\n    'content': (\"field.picklistValues\"),\n    'optionLabelPath': (\"content.label\"),\n    'optionValuePath': (\"content.value\"),\n    'value': (\"field.value\"),\n    'prompt': (\"Please select...\"),\n    'data-qa-input': (\"select\")\n  },contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n        </div>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_telField\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                <span data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"field.helpText\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" class=\\\"has-tooltip juicon juicon-info-circle\\\"></span>\\n            \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"column--md--6\\\">\\n    <div class=\\\"form__group mar--md--bn mar--md--tm\\\">\\n        <label for=\\\"firstName\\\" class=\\\"\\\">\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"field.label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"field.helpText\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        </label>\\n        \");\n  hashContexts = {'type': depth0,'value': depth0};\n  hashTypes = {'type': \"STRING\",'value': \"ID\"};\n  options = {hash:{\n    'type': (\"tel\"),\n    'value': (\"field.value\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n        <small class=\\\"input-error-content\\\">Error</small>\\n    </div>\\n</div>\\n\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_textArea\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                <span data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\\\" class=\\\"has-tooltip juicon juicon-info-circle\\\" data-original-title=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"field.helpText\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\"></span>\\n            \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"column--md--12\\\">\\n    <div class=\\\"form__group\\\">\\n        <label \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\"field.isRequired:required-field\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" data-qa-label=\\\"fieldName\\\">\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"field.label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"field.helpText\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n        </label>\\n        \");\n  hashContexts = {'value': depth0,'data-qa-input': depth0};\n  hashTypes = {'value': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'value': (\"field.value\"),\n    'data-qa-input': (\"textarea\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.textarea || (depth0 && depth0.textarea)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_textField\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                <span data-toggle=\\\"tooltip\\\" data-placement=\\\"bottom\\\" title=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"field.helpText\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" class=\\\"has-tooltip juicon juicon-info-circle\\\"></span>\\n            \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"column--md--6\\\">\\n    <div class=\\\"form__group mar--md--bn mar--md--tm\\\">\\n        <label for=\\\"firstName\\\" class=\\\"\\\">\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"field.label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"field.helpText\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        </label>\\n        \");\n  hashContexts = {'type': depth0,'value': depth0};\n  hashTypes = {'type': \"STRING\",'value': \"ID\"};\n  options = {hash:{\n    'type': (\"text\"),\n    'value': (\"field.value\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n        <small class=\\\"input-error-content\\\">Error</small>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"apply\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\nfunction program1(depth0,data) {\n  \n  \n  data.buffer.push(\"<a>Contact Info</a>\");\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'tagName': depth0,'class': depth0,'disabledWhen': depth0};\n  hashTypes = {'tagName': \"STRING\",'class': \"STRING\",'disabledWhen': \"STRING\"};\n  options = {hash:{\n    'tagName': (\"li\"),\n    'class': (\"list-group__item\"),\n    'disabledWhen': (\"disableResume\")\n  },inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"resume\", options) : helperMissing.call(depth0, \"link-to\", \"resume\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\nfunction program4(depth0,data) {\n  \n  \n  data.buffer.push(\"<a>Resume</a>\");\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'tagName': depth0,'class': depth0,'disabledWhen': depth0};\n  hashTypes = {'tagName': \"STRING\",'class': \"STRING\",'disabledWhen': \"STRING\"};\n  options = {hash:{\n    'tagName': (\"li\"),\n    'class': (\"list-group__item\"),\n    'disabledWhen': (\"disableSkills\")\n  },inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"skills\", options) : helperMissing.call(depth0, \"link-to\", \"skills\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\nfunction program7(depth0,data) {\n  \n  \n  data.buffer.push(\"<a>Skills</a>\");\n  }\n\nfunction program9(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'tagName': depth0,'class': depth0,'disabledWhen': depth0};\n  hashTypes = {'tagName': \"STRING\",'class': \"STRING\",'disabledWhen': \"STRING\"};\n  options = {hash:{\n    'tagName': (\"li\"),\n    'class': (\"list-group__item\"),\n    'disabledWhen': (\"disableEmploymentHistory\")\n  },inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"employmentHistory\", options) : helperMissing.call(depth0, \"link-to\", \"employmentHistory\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\nfunction program10(depth0,data) {\n  \n  \n  data.buffer.push(\"<a>Employment History</a>\");\n  }\n\nfunction program12(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'tagName': depth0,'class': depth0,'disabledWhen': depth0};\n  hashTypes = {'tagName': \"STRING\",'class': \"STRING\",'disabledWhen': \"STRING\"};\n  options = {hash:{\n    'tagName': (\"li\"),\n    'class': (\"list-group__item\"),\n    'disabledWhen': (\"disableEducationHistory\")\n  },inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"educationHistory\", options) : helperMissing.call(depth0, \"link-to\", \"educationHistory\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\nfunction program13(depth0,data) {\n  \n  \n  data.buffer.push(\"<a>Education History</a>\");\n  }\n\nfunction program15(depth0,data) {\n  \n  \n  data.buffer.push(\"<a>General</a>\");\n  }\n\nfunction program17(depth0,data) {\n  \n  \n  data.buffer.push(\"<a>Job Specific</a>\");\n  }\n\nfunction program19(depth0,data) {\n  \n  \n  data.buffer.push(\"<a>Legally Required</a>\");\n  }\n\nfunction program21(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        <button class=\\\"button button--secondary button--sf1-nav mar--sm--only--ls mar--sm--only--ts mar--sm--only--ls float--left prev\\\" style=\\\"top:0;left:0;\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickPrevious\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"><span class=\\\"juicon juicon-backward\\\"></span> <span class=\\\"show-brkpoint--md\\\">Previous</span></button>\\n                    \");\n  return buffer;\n  }\n\nfunction program23(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                        <button \");\n  hashContexts = {'class': depth0,'disabled': depth0};\n  hashTypes = {'class': \"STRING\",'disabled': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary :button--sf1-nav :mar--sm--only--ls :mar--sm--only--ts :mar--sm--only--rs :float--right :next disableNext:disabled\"),\n    'disabled': (\"disableNext\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" style=\\\"top:0;right:0;\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickNext\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"><span class=\\\"show-brkpoint--md\\\">Next</span> <span class=\\\"juicon juicon-forward\\\"></span> </button>\\n                    \");\n  return buffer;\n  }\n\nfunction program25(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <button class=\\\"button button--secondary button--sf1-nav mar--sm--only--ls mar--sm--only--ts mar--sm--only--ls float--left prev\\\" style=\\\"top:0;left:0;\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickPrevious\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"><span class=\\\"juicon juicon-backward\\\"></span> <span class=\\\"show-brkpoint--md\\\">Previous</span></button>\\n                        \");\n  return buffer;\n  }\n\nfunction program27(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                            <button \");\n  hashContexts = {'class': depth0,'disabled': depth0};\n  hashTypes = {'class': \"STRING\",'disabled': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary :button--sf1-nav :mar--sm--only--ls :mar--sm--only--ts :mar--sm--only--rs :float--right :next disableNext:disabled\"),\n    'disabled': (\"disableNext\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" style=\\\"top:0;right:0;\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickNext\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"><span class=\\\"show-brkpoint--md\\\">Next</span> <span class=\\\"juicon juicon-forward\\\"></span> </button>\\n                        \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"scope-container\\\">\\n    <div class=\\\"modal fade\\\" id=\\\"locationModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"myModalLabel\\\" aria-hidden=\\\"true\\\">\\n        <div class=\\\"modal__shell\\\">\\n            <div class=\\\"modal__content\\\">\\n                <div class=\\\"modal__top\\\">\\n                    <!--<button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">-->\\n                        <!--<span class=\\\"close-modal-x\\\"></span><span class=\\\"sr-only\\\">Close</span>-->\\n                    <!--</button>-->\\n                    <h2 class=\\\"modal__heading\\\" id=\\\"myModalLabel\\\">Before you begin...</h2>\\n                </div>\\n                <div class=\\\"modal__body\\\">\\n                    <p class=\\\"mar--sm--tn\\\">Please confirm the location where you'd prefer to work.</p>\\n                    <div class=\\\"form__group\\\">\\n                        <div class=\\\"select__wrap\\\">\\n                            <div class=\\\"input__icon juicon juicon-down\\\"></div>\\n                            <select>\\n                                <option>Chicago, IL (Closest)</option>\\n                                <option>Boston, MA</option>\\n                                <option>London, GB, UK</option>\\n                                <option>Remote</option>\\n                                <option>San Francisco, CA (Primary)</option>\\n                                <option>Vancouver, BC, CA</option>\\n                            </select>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"modal__footer\\\">\\n                    <button type=\\\"button\\\" class=\\\"button button--primary\\\" data-dismiss=\\\"modal\\\">OK</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"content pad--md--ts pad--md--bl pad--sm--only--n pad--sm--tm\\\">\\n        <div class=\\\"content__section show-brkpoint--md\\\">\\n            <img class=\\\"mar--sm--bxl theme-logo\\\" src=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"companyLogoUrl\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" style=\\\"height: 40px; width: 58px\\\"/>\\n        </div>\\n        <div class=\\\"row mar--sm--only--n\\\">\\n            <div class=\\\"column--md--3 pad--sm--only--n\\\">\\n                <ul class=\\\"list-group wizardNav show-brkpoint--md mar--md--tn\\\">\\n                    \");\n  hashContexts = {'tagName': depth0,'class': depth0};\n  hashTypes = {'tagName': \"STRING\",'class': \"STRING\"};\n  options = {hash:{\n    'tagName': (\"li\"),\n    'class': (\"list-group__item\")\n  },inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"contactInfo\", options) : helperMissing.call(depth0, \"link-to\", \"contactInfo\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isResumeEnabled\", {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isSkillsEnabled\", {hash:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isEmploymentHistoryEnabled\", {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isEducationHistoryEnabled\", {hash:{},inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  hashContexts = {'tagName': depth0,'class': depth0,'disabledWhen': depth0};\n  hashTypes = {'tagName': \"STRING\",'class': \"STRING\",'disabledWhen': \"STRING\"};\n  options = {hash:{\n    'tagName': (\"li\"),\n    'class': (\"list-group__item\"),\n    'disabledWhen': (\"disableGeneral\")\n  },inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"general\", options) : helperMissing.call(depth0, \"link-to\", \"general\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  hashContexts = {'tagName': depth0,'class': depth0,'disabledWhen': depth0};\n  hashTypes = {'tagName': \"STRING\",'class': \"STRING\",'disabledWhen': \"STRING\"};\n  options = {hash:{\n    'tagName': (\"li\"),\n    'class': (\"list-group__item\"),\n    'disabledWhen': (\"disableJobSpecific\")\n  },inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"jobSpecific\", options) : helperMissing.call(depth0, \"link-to\", \"jobSpecific\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    \");\n  hashContexts = {'tagName': depth0,'class': depth0,'disabledWhen': depth0};\n  hashTypes = {'tagName': \"STRING\",'class': \"STRING\",'disabledWhen': \"STRING\"};\n  options = {hash:{\n    'tagName': (\"li\"),\n    'class': (\"list-group__item\"),\n    'disabledWhen': (\"disableLegallyRequired\")\n  },inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"legallyRequired\", options) : helperMissing.call(depth0, \"link-to\", \"legallyRequired\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                </ul>\\n            </div>\\n            <div class=\\\"column--md--9 pad--sm--only--n\\\">\\n                <div class=\\\"content mar--md--tm pad--md--n mar--md--bm show-brkpoint--sm--only\\\">\\n                    <hr class=\\\"show-brkpoint--md\\\"/>\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers.unless.call(depth0, \"isContactInfo\", {hash:{},inverse:self.noop,fn:self.program(21, program21, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers.unless.call(depth0, \"isLegallyRequired\", {hash:{},inverse:self.noop,fn:self.program(23, program23, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    <div class=\\\"pad--sm--lxxl pad--sm--rxxl text-center pad--sm--tm text-faded\\\">\\n                        <span class=\\\"currentNumber\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"currentSectionNum\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>/<span class=\\\"totalNumber\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"numSections\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n                    </div>\\n                </div>\\n                <div class=\\\"wizardContent\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"outlet\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                    <div class=\\\"content mar--sm--tm pad--md--n mar--sm--bm\\\">\\n                        <hr class=\\\"show-brkpoint--md\\\"/>\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers.unless.call(depth0, \"isContactInfo\", {hash:{},inverse:self.noop,fn:self.program(25, program25, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers.unless.call(depth0, \"isLegallyRequired\", {hash:{},inverse:self.noop,fn:self.program(27, program27, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        <footer>\\n            <div class=\\\"content__section\\\">\\n                <img class=\\\"mar--sm--txl theme-logo\\\" src=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"companyLogoUrl\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" style=\\\"height: 40px; width: 58px\\\"/>\\n                <ul class=\\\"inline-list text-left pad--sm--tm fss\\\">\\n                    <li class=\\\"inline-list__item\\\">&copy; 2015</li>\\n                    <li class=\\\"inline-list__item\\\"><a href=\\\"#\\\">Privacy</a></li>\\n                    <li class=\\\"inline-list__item\\\"><a href=\\\"#\\\">Terms</a></li>\\n                </ul>\\n            </div>\\n        </footer>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"components/datepicker\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<div class=\\\"row input__group\\\">\\n    <div class=\\\"column--md--8\\\">\\n        \");\n  hashContexts = {'type': depth0,'value': depth0,'readonly': depth0};\n  hashTypes = {'type': \"STRING\",'value': \"ID\",'readonly': \"BOOLEAN\"};\n  options = {hash:{\n    'type': (\"text\"),\n    'value': (\"value\"),\n    'readonly': (true)\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n    </div>\\n    <div class=\\\"column--md--4\\\">\\n        <button type=\\\"button\\\" class=\\\"button button--secondary datepicker\\\" data-date-format=\\\"\\\" data-date=\\\"\\\">\\n            <span class=\\\"juicon juicon-calendar\\\"></span>\\n        </button>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"contactInfo\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"field.partial\", options) : helperMissing.call(depth0, \"partial\", \"field.partial\", options))));\n  data.buffer.push(\"\\n                \");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            <div class=\\\"list-heading\\\">\\n                <h4 class=\\\"list-heading__title\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"contactFieldsLabel\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n            </div>\\n            <div class=\\\"panel__body pad--sm--tn\\\">\\n                <div class=\\\"row\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"field\", \"in\", \"contact\", {hash:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                </div>\\n            </div>\\n        \");\n  return buffer;\n  }\nfunction program4(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"field.partial\", options) : helperMissing.call(depth0, \"partial\", \"field.partial\", options))));\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            <div class=\\\"list-heading\\\">\\n                <h4 class=\\\"list-heading__title\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"addressFieldsLabel\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n            </div>\\n            <div class=\\\"panel__body pad--sm--tn\\\">\\n                <div class=\\\"row\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"field\", \"in\", \"address\", {hash:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                </div>\\n            </div>\\n        \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div id=\\\"aboutMe\\\" class=\\\"wizardSection pad--sm--only--n active\\\">\\n    <h1 class=\\\"text-left-center page__heading pad--sm--tm pad--md--tn pad--sm--bm\\\">Contact Info</h1>\\n    <div class=\\\"panel\\\">\\n        <div class=\\\"list-heading\\\">\\n            <h4 class=\\\"list-heading__title has-radius-top\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"nameFieldsLabel\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n        </div>\\n        <div class=\\\"panel__body pad--sm--tn\\\">\\n            <div class=\\\"row\\\">\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"field\", \"in\", \"name\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n            </div>\\n        </div>\\n\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"contact\", {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"address\", {hash:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"educationHistory\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            <div class=\\\"panel__component panel__component--removable pad--sm--tn\\\">\\n                <button type=\\\"button\\\" class=\\\"close\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickDeleteEducationHistory\", \"educationHistory\", {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"><span class=\\\"component-remove-x\\\"></span><span class=\\\"sr-only\\\">Close</span></button>\\n                <div class=\\\"row\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"field\", \"in\", \"educationHistory.fields\", {hash:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                </div>\\n            </div>\\n        \");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"field.partial\", options) : helperMissing.call(depth0, \"partial\", \"field.partial\", options))));\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div id=\\\"edHistory\\\" class=\\\"wizardSection pad--sm--only--n active\\\">\\n    <h1 class=\\\"text-left-center page__heading pad--sm--tm pad--md--tn pad--sm--bm\\\">Education History</h1>                            <div class=\\\"panel\\\">\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"educationHistory\", \"in\", \"model\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        <div class=\\\"panel__component\\\">\\n            <button class=\\\"button button--primary width--full--sm--only\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickAddEducationHistory\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\">Add Education History <span class=\\\"juicon juicon-plus\\\"></span></button>\\n        </div>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"employmentHistory\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            <div class=\\\"panel__component panel__component--removable pad--sm--tn\\\">\\n                <button type=\\\"button\\\" class=\\\"close\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickDeleteEmploymentHistory\", \"employmentHistory\", {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"><span class=\\\"component-remove-x\\\"></span><span class=\\\"sr-only\\\">Close</span></button>\\n                <div class=\\\"row\\\">\\n                    \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"field\", \"in\", \"employmentHistory.fields\", {hash:{\n    'itemController': (\"historyField\")\n  },inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                </div>\\n            </div>\\n        \");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"field.partial\", options) : helperMissing.call(depth0, \"partial\", \"field.partial\", options))));\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div id=\\\"empHistory\\\" class=\\\"wizardSection pad--sm--only--n active\\\">\\n    <h1 class=\\\"text-left-center page__heading pad--sm--tm pad--md--tn pad--sm--bm\\\">Employment History</h1>\\n    <div class=\\\"panel\\\">\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"employmentHistory\", \"in\", \"model\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        <div class=\\\"panel__component\\\">\\n            <button class=\\\"button button--primary width--full--sm--only\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickAddEmploymentHistory\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\">Add Employment History <span class=\\\"juicon juicon-plus\\\"></span></button>\\n        </div>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"general\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"fe.isEtNone\", {hash:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                \\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isQuestion\", {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isHeading\", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isRichText\", {hash:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n            \");\n  return buffer;\n  }\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"fe.isAtNone\", {hash:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                \");\n  return buffer;\n  }\nfunction program4(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isRadioButton\", {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isCheckbox\", {hash:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isTextField\", {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isParagraph\", {hash:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isDate\", {hash:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\nfunction program5(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <ul class=\\\"form__group list-style-type-none\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"answer\", \"in\", \"fe.answerChoices\", {hash:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                            </ul>\\n                        \");\n  return buffer;\n  }\nfunction program6(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\" \\n                                    <li class=\\\"form__group mar--sm--tm\\\">\\n                                        <label>\\n                                            <span class=\\\"part__left--fixed pad--sm--rn\\\">\\n                                                \");\n  hashContexts = {'name': depth0,'value': depth0};\n  hashTypes = {'name': \"ID\",'value': \"ID\"};\n  options = {hash:{\n    'name': (\"fe.value\"),\n    'value': (\"answer.Value__c\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['radio-button'] || (depth0 && depth0['radio-button'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"radio-button\", options))));\n  data.buffer.push(\"\\n                                            </span>\\n                                            <span class=\\\"part__body\\\" data-qa-label=\\\"answerChoice\\\"> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"answer.Value__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" </span>\\n                                        </label>\\n                                    </li>\\n                                \");\n  return buffer;\n  }\n\nfunction program8(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <ul class=\\\"form__group list-style-type-none\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"answer\", \"in\", \"fe.answerChoices\", {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                            </ul>\\n                        \");\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                                    <li class=\\\"form__group mar--sm--tm\\\">\\n                                        <label>\\n                                            <span class=\\\"part__left--fixed pad--sm--rn\\\">\\n                                                \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"answer.isChecked\"),\n    'data-qa-input': (\"answerChoice\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n                                            </span>\\n                                            <span class=\\\"part__body\\\" data-qa-label=\\\"answerChoice\\\"> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"answer.Value__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" </span>\\n                                        </label>\\n                                    </li>\\n                                \");\n  return buffer;\n  }\n\nfunction program11(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-input=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n                   \\n                            <div class=\\\"form__group mar--sm--tm\\\">\\n                                <label class=\\\"sr-only\\\"></label>\\n                                \");\n  hashContexts = {'type': depth0,'value': depth0,'placeholder': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'value': \"ID\",'placeholder': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"text\"),\n    'value': (\"fe.value\"),\n    'placeholder': (\"labels.typeAnAnswer\"),\n    'data-qa-input': (\"textField\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n                                <small class=\\\"input-error-content\\\"></small>\\n                            </div>         \\n                        \");\n  return buffer;\n  }\n\nfunction program13(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <div class=\\\"form__group mar--sm--tm\\\">\\n                                <div class=\\\"form__group\\\">\\n                                    \");\n  hashContexts = {'value': depth0,'placeholder': depth0,'data-qa-input': depth0};\n  hashTypes = {'value': \"ID\",'placeholder': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'value': (\"fe.value\"),\n    'placeholder': (\"labels.typeAnAnswer\"),\n    'data-qa-input': (\"textArea\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.textarea || (depth0 && depth0.textarea)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n  data.buffer.push(\"\\n                                </div>\\n                            </div>\\n                        \");\n  return buffer;\n  }\n\nfunction program15(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <div class=\\\"form__group mar--sm--tm\\\" data-qa-input=\\\"input\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"column--md--6\\\">\\n                                        \");\n  hashContexts = {'value': depth0};\n  hashTypes = {'value': \"ID\"};\n  options = {hash:{\n    'value': (\"fe.dateValue\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['date-picker'] || (depth0 && depth0['date-picker'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"date-picker\", options))));\n  data.buffer.push(\"\\n                                    </div>\\n                                </div>\\n                                \\n                                <small class=\\\"input-error-content\\\"></small>\\n                            </div>\\n                        \");\n  return buffer;\n  }\n\nfunction program17(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    <div class=\\\"building-block__done\\\">\\n                        <h1 class=\\\"section__title mar--sm--bn\\\" data-qa-label=\\\"heading\\\">\\n                            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                        </h1>\\n                    </div>\\n                \");\n  return buffer;\n  }\n\nfunction program19(depth0,data) {\n  \n  var buffer = '', hashContexts, hashTypes;\n  data.buffer.push(\"\\n                    <div class=\\\"building-block__done\\\" data-qa-label=\\\"richText\\\">\\n                        \");\n  hashContexts = {'unescaped': depth0};\n  hashTypes = {'unescaped': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Rich_Text_Content__c\", {hash:{\n    'unescaped': (\"true\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                    </div>\\n                \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div id=\\\"general\\\" class=\\\"wizardSection pad--sm--only--n\\\">\\n    <h1 class=\\\"text-left-center page__heading pad--sm--tm pad--md--tn pad--sm--bm\\\">General</h1>\\n    <div class=\\\"content__section pad--sm--only--tn\\\">\\n        \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"fe\", \"in\", \"model\", {hash:{\n    'itemController': (\"formElement\")\n  },inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\" \\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"jobSpecific\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"fe.isEtNone\", {hash:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                \\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isQuestion\", {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isHeading\", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isRichText\", {hash:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n            \");\n  return buffer;\n  }\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"fe.isAtNone\", {hash:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                \");\n  return buffer;\n  }\nfunction program4(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isRadioButton\", {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isCheckbox\", {hash:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isTextField\", {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isParagraph\", {hash:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isDate\", {hash:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\nfunction program5(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <ul class=\\\"form__group list-style-type-none\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"answer\", \"in\", \"fe.answerChoices\", {hash:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                            </ul>\\n                        \");\n  return buffer;\n  }\nfunction program6(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\" \\n                                    <li class=\\\"form__group mar--sm--tm\\\">\\n                                        <label>\\n                                            <span class=\\\"part__left--fixed pad--sm--rn\\\">\\n                                                \");\n  hashContexts = {'name': depth0,'value': depth0};\n  hashTypes = {'name': \"ID\",'value': \"ID\"};\n  options = {hash:{\n    'name': (\"fe.value\"),\n    'value': (\"answer.Value__c\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['radio-button'] || (depth0 && depth0['radio-button'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"radio-button\", options))));\n  data.buffer.push(\"\\n                                            </span>\\n                                            <span class=\\\"part__body\\\" data-qa-label=\\\"answerChoice\\\"> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"answer.Value__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" </span>\\n                                        </label>\\n                                    </li>\\n                                \");\n  return buffer;\n  }\n\nfunction program8(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <ul class=\\\"form__group list-style-type-none\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"answer\", \"in\", \"fe.answerChoices\", {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                            </ul>\\n                        \");\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                                    <li class=\\\"form__group mar--sm--tm\\\">\\n                                        <label>\\n                                            <span class=\\\"part__left--fixed pad--sm--rn\\\">\\n                                                \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"answer.isChecked\"),\n    'data-qa-input': (\"answerChoice\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n                                            </span>\\n                                            <span class=\\\"part__body\\\" data-qa-label=\\\"answerChoice\\\"> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"answer.Value__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" </span>\\n                                        </label>\\n                                    </li>\\n                                \");\n  return buffer;\n  }\n\nfunction program11(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-input=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n                   \\n                            <div class=\\\"form__group mar--sm--tm\\\">\\n                                <label class=\\\"sr-only\\\"></label>\\n                                \");\n  hashContexts = {'type': depth0,'value': depth0,'placeholder': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'value': \"ID\",'placeholder': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"text\"),\n    'value': (\"fe.value\"),\n    'placeholder': (\"labels.typeAnAnswer\"),\n    'data-qa-input': (\"textField\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n                                <small class=\\\"input-error-content\\\"></small>\\n                            </div>         \\n                        \");\n  return buffer;\n  }\n\nfunction program13(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <div class=\\\"form__group mar--sm--tm\\\">\\n                                <div class=\\\"form__group\\\">\\n                                    \");\n  hashContexts = {'value': depth0,'placeholder': depth0,'data-qa-input': depth0};\n  hashTypes = {'value': \"ID\",'placeholder': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'value': (\"fe.value\"),\n    'placeholder': (\"labels.typeAnAnswer\"),\n    'data-qa-input': (\"textArea\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.textarea || (depth0 && depth0.textarea)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n  data.buffer.push(\"\\n                                </div>\\n                            </div>\\n                        \");\n  return buffer;\n  }\n\nfunction program15(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <div class=\\\"form__group mar--sm--tm\\\" data-qa-input=\\\"input\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"column--md--6\\\">\\n                                        \");\n  hashContexts = {'value': depth0};\n  hashTypes = {'value': \"ID\"};\n  options = {hash:{\n    'value': (\"fe.dateValue\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['date-picker'] || (depth0 && depth0['date-picker'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"date-picker\", options))));\n  data.buffer.push(\"\\n                                    </div>\\n                                </div>\\n                                \\n                                <small class=\\\"input-error-content\\\"></small>\\n                            </div>\\n                        \");\n  return buffer;\n  }\n\nfunction program17(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    <div class=\\\"building-block__done\\\">\\n                        <h1 class=\\\"section__title mar--sm--bn\\\" data-qa-label=\\\"heading\\\">\\n                            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                        </h1>\\n                    </div>\\n                \");\n  return buffer;\n  }\n\nfunction program19(depth0,data) {\n  \n  var buffer = '', hashContexts, hashTypes;\n  data.buffer.push(\"\\n                    <div class=\\\"building-block__done\\\" data-qa-label=\\\"richText\\\">\\n                        \");\n  hashContexts = {'unescaped': depth0};\n  hashTypes = {'unescaped': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Rich_Text_Content__c\", {hash:{\n    'unescaped': (\"true\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                    </div>\\n                \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div id=\\\"jobSpecific\\\" class=\\\"wizardSection pad--sm--only--n\\\">\\n    <h1 class=\\\"text-left-center page__heading pad--sm--tm pad--md--tn pad--sm--bm\\\">Job Specific</h1>\\n    <div class=\\\"content__section pad--sm--only--tn\\\">\\n        \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"fe\", \"in\", \"model\", {hash:{\n    'itemController': (\"formElement\")\n  },inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\" \\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"legallyRequired\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"fe.isEtNone\", {hash:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                \\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isQuestion\", {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isHeading\", {hash:{},inverse:self.noop,fn:self.program(17, program17, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isRichText\", {hash:{},inverse:self.noop,fn:self.program(19, program19, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n            \");\n  return buffer;\n  }\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"fe.isAtNone\", {hash:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                \");\n  return buffer;\n  }\nfunction program4(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isRadioButton\", {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isCheckbox\", {hash:{},inverse:self.noop,fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isTextField\", {hash:{},inverse:self.noop,fn:self.program(11, program11, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isParagraph\", {hash:{},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"fe.isDate\", {hash:{},inverse:self.noop,fn:self.program(15, program15, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\nfunction program5(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <ul class=\\\"form__group list-style-type-none\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"answer\", \"in\", \"fe.answerChoices\", {hash:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                            </ul>\\n                        \");\n  return buffer;\n  }\nfunction program6(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\" \\n                                    <li class=\\\"form__group mar--sm--tm\\\">\\n                                        <label>\\n                                            <span class=\\\"part__left--fixed pad--sm--rn\\\">\\n                                                \");\n  hashContexts = {'name': depth0,'value': depth0};\n  hashTypes = {'name': \"ID\",'value': \"ID\"};\n  options = {hash:{\n    'name': (\"fe.value\"),\n    'value': (\"answer.Value__c\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['radio-button'] || (depth0 && depth0['radio-button'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"radio-button\", options))));\n  data.buffer.push(\"\\n                                            </span>\\n                                            <span class=\\\"part__body\\\" data-qa-label=\\\"answerChoice\\\"> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"answer.Value__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" </span>\\n                                        </label>\\n                                    </li>\\n                                \");\n  return buffer;\n  }\n\nfunction program8(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <ul class=\\\"form__group list-style-type-none\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"answer\", \"in\", \"fe.answerChoices\", {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                            </ul>\\n                        \");\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                                    <li class=\\\"form__group mar--sm--tm\\\">\\n                                        <label>\\n                                            <span class=\\\"part__left--fixed pad--sm--rn\\\">\\n                                                \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"answer.isChecked\"),\n    'data-qa-input': (\"answerChoice\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n                                            </span>\\n                                            <span class=\\\"part__body\\\" data-qa-label=\\\"answerChoice\\\"> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"answer.Value__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" </span>\\n                                        </label>\\n                                    </li>\\n                                \");\n  return buffer;\n  }\n\nfunction program11(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-input=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n                   \\n                            <div class=\\\"form__group mar--sm--tm\\\">\\n                                <label class=\\\"sr-only\\\"></label>\\n                                <input type=\\\"text\\\" placeholder=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"labels.typeAnAnswer\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" data-qa-input=\\\"input\\\"/>\\n                                <small class=\\\"input-error-content\\\"></small>\\n                            </div>         \\n                        \");\n  return buffer;\n  }\n\nfunction program13(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <div class=\\\"form__group mar--sm--tm\\\">\\n                                <div class=\\\"form__group\\\">\\n                                    <textarea placeholder=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"labels.typeAnAnswer\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" data-qa-input=\\\"input\\\"></textarea>\\n                                </div>\\n                            </div>\\n                        \");\n  return buffer;\n  }\n\nfunction program15(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n                            <p class=\\\"mar--sm--tm mar--md--txl\\\" data-qa-label=\\\"questionText\\\">\\n                                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </p>\\n\\n                            <div class=\\\"form__group mar--sm--tm\\\" data-qa-input=\\\"input\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"column--md--6\\\">\\n                                        \");\n  hashContexts = {'value': depth0};\n  hashTypes = {'value': \"ID\"};\n  options = {hash:{\n    'value': (\"fe.dateValue\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['date-picker'] || (depth0 && depth0['date-picker'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"date-picker\", options))));\n  data.buffer.push(\"\\n                                    </div>\\n                                </div>\\n                                \\n                                <small class=\\\"input-error-content\\\"></small>\\n                            </div>\\n                        \");\n  return buffer;\n  }\n\nfunction program17(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    <div class=\\\"building-block__done\\\">\\n                        <h1 class=\\\"section__title mar--sm--bn\\\" data-qa-label=\\\"heading\\\">\\n                            \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                        </h1>\\n                    </div>\\n                \");\n  return buffer;\n  }\n\nfunction program19(depth0,data) {\n  \n  var buffer = '', hashContexts, hashTypes;\n  data.buffer.push(\"\\n                    <div class=\\\"building-block__done\\\" data-qa-label=\\\"richText\\\">\\n                        \");\n  hashContexts = {'unescaped': depth0};\n  hashTypes = {'unescaped': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"fe.Rich_Text_Content__c\", {hash:{\n    'unescaped': (\"true\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                    </div>\\n                \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div id=\\\"legallyRequired\\\" class=\\\"wizardSection pad--sm--only--n\\\">\\n    <h1 class=\\\"text-left-center page__heading pad--sm--tm pad--md--tn pad--sm--bm\\\">Legally Required</h1>\\n    <div class=\\\"content__section pad--sm--only--tn\\\">\\n        \");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack1 = helpers.each.call(depth0, \"fe\", \"in\", \"model\", {hash:{\n    'itemController': (\"formElement\")\n  },inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\" \\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"resume\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"resumeFileName\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                \");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  data.buffer.push(\"\\n                    No file selected\\n                \");\n  }\n\n  data.buffer.push(\"<div id=\\\"resume\\\" class=\\\"wizardSection pad--sm--only--n active\\\">\\n    <h1 class=\\\"text-left-center page__heading pad--sm--tm pad--md--tn pad--sm--bm\\\">Resume</h1>\\n    <div class=\\\"panel\\\">\\n        <div class=\\\"panel__body\\\">\\n            <p class=\\\"mar--sm--tn\\\">\\n                please upload your resume or select it from another source\\n                <div style=\\\"display:none;\\\">\\n                    \");\n  hashContexts = {'resumeFileName': depth0,'base64fileData': depth0};\n  hashTypes = {'resumeFileName': \"ID\",'base64fileData': \"ID\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"uploadFile\", {hash:{\n    'resumeFileName': (\"resumeFileName\"),\n    'base64fileData': (\"base64fileData\")\n  },contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                </div>\\n            </p>\\n            <div class=\\\"button-group inline-block float--left\\\">\\n                <div class=\\\"button button--secondary\\\" data-toggle=\\\"dropdown\\\">Upload <span class=\\\"show-brkpoint--md\\\">your</span> resume <span class=\\\"juicon juicon-upload\\\"></span></div>\\n                <ul class=\\\"dropdown-menu\\\">\\n                    <li class=\\\"dropdown-menu__list-item\\\"><a href=\\\"#\\\"><span class=\\\"juicon juicon-dropbox\\\"></span> from Dropbox</a></li>\\n                    <li class=\\\"dropdown-menu__list-item\\\"><a href=\\\"#\\\"><span class=\\\"juicon juicon-google-drive\\\"></span> from Google Drive</a></li>\\n                    <li class=\\\"dropdown-menu__list-item\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickUploadFromDevice\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"><a href=\\\"#\\\"><span class=\\\"juicon juicon-upload\\\"></span> from Device</a></li>\\n                </ul>\\n            </div>\\n            <span class=\\\"input-size inline-block float--left mar--sm--lm text-faded\\\">\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"resumeFileName\", {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n            </span>\\n        </div>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"skills\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<div id=\\\"skills\\\" class=\\\"wizardSection pad--sm--only--n active\\\">\\n    <h1 class=\\\"text-left-center page__heading pad--sm--tm pad--md--tn pad--sm--bm\\\">Skills</h1>\\n\\n    <div class=\\\"content__section\\\">\\n        \");\n  hashContexts = {'value': depth0};\n  hashTypes = {'value': \"ID\"};\n  options = {hash:{\n    'value': (\"selectedSkills\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['select-2'] || (depth0 && depth0['select-2'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"select-2\", options))));\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\n})();//@ sourceURL=app/templates.js")

eval("(function() {\n\n// Kick off Ember\nApp = Ember.Application.create({\n    rootElement: '#application'\n});\n\nApp.EID = 0;\n\nvar fieldTypeToPartialMap = {\n    'STRING' : 'textField',\n    'EMAIL' : 'textField',\n    'PHONE' : 'telField',\n    'TEXTAREA' : 'textArea',\n    'DATE' : 'date',\n    'PICKLIST' : 'picklist',\n    'BOOLEAN' : 'checkbox',\n    'DOUBLE' : 'telField'\n};\n\nvar appFieldsToLinkedInMap = {\n    'First_Name__c' : 'firstName',\n    'Last_Name__c' : 'lastName',\n    'Email__c' : 'emailAddress',\n    'Mobile_Phone__c' : 'phoneNumbers'\n};\n\nvar employmentHistoryBlock;\nvar educationHistoryBlock;\n\n// Pull in degree picklist values\nvar degreePicklistValues = [];\n\nif (!Ember.isEmpty(parsedApplyMap.educationHistoryFields) \n                        && !Ember.isNone(parsedApplyMap.educationHistoryFields.findBy('name', 'Education_Level__c'))) {\n    degreePicklistValues = parsedApplyMap.educationHistoryFields.findBy('name', 'Education_Level__c').picklistValues.getEach('value');\n}\n\n\nfunction getEmploymentHistoryBlock(employmentHistoryObj) {\n    if (Ember.isNone(employmentHistoryBlock)) {\n        employmentHistoryBlock = {\n            fields: []\n        };\n\n        parsedApplyMap.employmentHistoryFields.forEach(function(f) {\n            var fieldObjWithValue = JSON.parse(JSON.stringify(f));\n\n            //fieldObjWithValue.value = null;\n            fieldObjWithValue.partial = fieldTypeToPartialMap[f.type];\n            employmentHistoryBlock.fields.addObject(fieldObjWithValue);\n        });\n    }\n\n    var newBlock = {\n        eId: ++App.EID,\n        fields: employmentHistoryBlock.fields.copy(true)\n    };\n        \n    if (!Ember.isNone(employmentHistoryObj)) {\n        newBlock.fields.forEach(function(f) {\n            f.value = employmentHistoryObj[f.name];\n        });\n\n        newBlock.Id = employmentHistoryObj.Id;\n    }\n\n    return newBlock;\n}\n\nfunction getEducationHistoryBlock(educationHistoryObj) {\n    if(Ember.isNone(educationHistoryBlock)) {\n        educationHistoryBlock = {\n            fields: []\n        };\n    \n        parsedApplyMap.educationHistoryFields.forEach(function(f) {\n            var fieldObjWithValue = JSON.parse(JSON.stringify(f));\n            //fieldObjWithValue.value = null;\n            fieldObjWithValue.partial = fieldTypeToPartialMap[f.type];\n            educationHistoryBlock.fields.addObject(fieldObjWithValue);\n        });\n    }\n\n    var newBlock = {\n        eId: ++App.EID,\n        fields: educationHistoryBlock.fields.copy(true)\n    };\n\n    if (!Ember.isNone(educationHistoryObj)) {\n        newBlock.fields.forEach(function(f) {\n            f.value = educationHistoryObj[f.name];\n        });\n\n        newBlock.Id = educationHistoryObj.Id;\n    }\n\n    return newBlock;\n}\n\nfunction convertLinkedInToEduationHistoryObj(educations) {\n    return educations.map(function(e) {\n        // Educations from linkedIn only have year in the startDate/endDate\n\n        return {\n            Education_Level__c: degreePicklistValues.indexOf(e.degree) !== -1 ? e.degree : 'Other',\n            Start_Date__c: !Ember.isNone(e.startDate) ? moment.utc(e.startDate.year, 'YYYY').format('YYYY-MM-DD') : null,\n            Name: e.schoolName,\n            Name__c: e.schoolName,\n            Status__c: null,\n            End_Date__c: !Ember.isNone(e.endDate) ? moment.utc(e.endDate.year, 'YYYY').format('YYYY-MM-DD') : null\n        };\n    });\n}\n\nfunction convertLinkedInToEmploymentHistoryObj(positions) {\n    return positions.map(function(p) {\n        // Positions from LinkedIn only have year and month in startDate/endDate\n        var startDate;\n        var endDate;\n\n        if (!Ember.isNone(p.startDate)) {\n            if (!Ember.isNone(p.startDate.month)) {\n                startDate = moment.utc(p.startDate.month + '/' + p.startDate.year, 'M/YYYY').format('YYYY-MM-DD');\n            } else {\n                startDate = moment.utc(p.startDate.year, 'YYYY').format('YYYY-MM-DD');\n            }\n        }\n\n        if (!Ember.isNone(p.endDate)) {\n            if (!Ember.isNone(p.endDate.month)) {\n                endDate = moment.utc(p.endDate.month + '/' + p.endDate.year, 'M/YYYY').format('YYYY-MM-DD');\n            } else {\n                endDate = moment.utc(p.endDate.year, 'YYYY').format('YYYY-MM-DD');\n            }\n        }\n\n        return {\n            Name: !Ember.isNone(p.company) ? p.company.name : null,\n            Job_Title__c: p.title,\n            Start_Date__c: startDate,\n            Is_Current__c: p.isCurrent,\n            End_Date__c: endDate\n        };\n    });\n}\n\nfunction createApplicantRequiredDataObj(legalFormElements) {\n    return legalFormElements.map(function(fe) {\n        if (!Ember.isEmpty(fe.value)) {\n            return {\n                Id: fe.applicantRequiredDataId,\n                Application__c: appId,\n                Form_Element__c: fe.Id,\n                Question__c: fe.Text__c,\n                Value__c: fe.value\n            }\n        } else {\n            null;\n        }\n    }).compact();\n}\n\nfunction createApplicantResponseObj(formElements) {\n    return formElements.map(function(fe) {\n        if (!Ember.isEmpty(fe.value)) {\n            var applicantResponseObj = {\n                Id: fe.applicantResponseId,\n                Application__c: appId,\n                Form_Element__c: fe.Id,\n                Date__c: moment().format('YYYY-MM-DD'),\n                Question__c: fe.Text__c,\n                Value__c: fe.value\n            };\n\n            if (!Ember.isNone(fe.Answer_Choices__r)) {\n                var answerChoice = fe.Answer_Choices__r.records.findBy('Value__c', fe.value);\n\n                applicantResponseObj.Answer_Choice__c = answerChoice.Id;\n                applicantResponseObj.Score__c = answerChoice.Score__c;\n            }\n\n            return applicantResponseObj;\n        } else {\n            return null;\n        }\n    }).compact();\n}\n\nfunction generateRemoteActionCallback(self, successFunction, isPromise) {\n    var callback = function(res, evt) {\n        if (res) {\n            var parsedResult = parseResult(res);\n\n            if (Ember.isEmpty(parsedResult.errorMessages)) {\n                successFunction(parsedResult);\n            } else {\n                console.log(parsedResult.errorMessages[0]);\n            }\n        } else {\n            // error\n        }\n    };\n\n    return callback;\n}\n\nApp.RadioButtonComponent = Ember.Component.extend({  \n    tagName: 'input',\n    attributeBindings: ['type', 'checked'],\n    type: 'radio',\n    checked: function () {\n        return this.get('value') == this.get('name');\n    }.property('value', 'name'),\n    click: function () {\n        this.set('name', this.get('value'));\n    }\n});\n\nApp.Select2Component = Ember.TextField.extend({\n    attributeBindings: ['multiple'],\n    multiple: true,\n    didInsertElement: function() {\n        var self = this;\n        this.$().select2({\n            multiple: true,\n            minimumInputLength: 3,\n            query: function (query) {\n\n                var callback = function(parsedResult) {\n                    var data = {\n                        results: []\n                    };\n\n                    parsedResult.data.skills.forEach(function(skill) {\n                        data.results.push({\n                            id: skill.Name,\n                            text: skill.Name\n                        });\n                    });\n\n                    query.callback(data);\n                };\n\n                cont.searchSkills(query.term, generateRemoteActionCallback(self, callback, false));\n            },\n            createSearchChoice: function(term, data) { \n                if ($(data).filter(function() { \n                    return this.text.localeCompare(term)===0; \n                }).length===0) {\n                    return {\n                        id:term, \n                        text:term\n                    };\n                } \n            },\n            initSelection : function (element, callback) {\n                var data = [];\n                $(element.val().split(\",\")).each(function () {\n                    data.push({id: this, text: this});\n                });\n                callback(data);\n            },\n            placeholder: \"Choose or type skills...\"\n        });\n    }\n});\n\nApp.UploadFileView = Ember.TextField.extend({\n    type: 'file',\n    attributeBindings: ['resumeFileName', 'base64fileData'],\n    change: function(evt) {\n      var self = this;\n      var input = evt.target;\n\n      if (input.files && input.files[0]) {\n\n        var reader = new FileReader();\n        var that = this;\n        var file = input.files[0];\n\n        reader.onload = function(e) {\n            var fileToUpload = e.srcElement.result;\n            var base64String = fileToUpload.split('base64,')[1];\n\n            self.set('resumeFileName', file.name);\n            self.set('base64fileData', base64String);\n\n            //cont.uploadResume(base64String, 'a0Yj0000001ltYK', function(res, evt) {\n            //    console.log(res);\n            //});\n        };\n\n        if (file.name !== this.get('resumeFileName')) {\n            reader.readAsDataURL(input.files[0]);\n        } else {\n            this.set('base64fileData', null);\n        }\n      }\n    }\n});\n\n// Controllers\n// Defining application controller as it automatically comes w/ currentPath which we need for navigation.\nApp.ApplicationController = Ember.Controller.extend({});\n\nApp.ApplyController = Ember.ObjectController.extend({\n    needs: ['application'],\n    currentPath: function() {  \n        return this.get('controllers.application.currentPath').split('.')[1];\n    }.property('controllers.application.currentPath'),\n    currentSectionNum: function() {\n        return this.get('sectionArray').indexOf(this.get('currentPath')) + 1;\n    }.property('currentPath'),\n    isContactInfo: Ember.computed.equal('currentPath', 'contactInfo'),\n    isLegallyRequired: Ember.computed.equal('currentPath', 'legallyRequired'),\n    disableNext: function() {\n        var currentPath = this.get('currentPath');\n        var incompleteProperty = ('is ' + currentPath + ' incomplete').camelize();\n        console.log(incompleteProperty)\n        console.log(this.get(incompleteProperty));\n        return this.get(incompleteProperty);\n    }.property('currentPath', 'isContactInfoIncomplete', 'isResumeIncomplete', 'isSkillsIncomplete', 'isEmploymentHistoryIncomplete',\n                    'isEducationHistoryIncomplete', 'isGeneralIncomplete', 'isJobSpecificIncomplete', 'isLegallyRequiredIncomplete'),\n    disableResume: function() {\n        return this.get('isContactInfoIncomplete');\n    }.property('isContactInfoIncomplete'),\n    disableSkills: function() {\n        return this.get('isContactInfoIncomplete') || this.get('isResumeIncomplete');\n    }.property('isContactInfoIncomplete', 'isResumeIncomplete'),\n    disableEmploymentHistory: function() {\n        return this.get('isContactInfoIncomplete') || this.get('isResumeIncomplete') || this.get('isSkillsIncomplete');\n    }.property('isContactInfoIncomplete', 'isResumeIncomplete', 'isSkillsIncomplete'),\n    disableEducationHistory: function() {\n        return this.get('isContactInfoIncomplete') || this.get('isResumeIncomplete') \n                        || this.get('isSkillsIncomplete') || this.get('isEmploymentHistoryIncomplete');\n    }.property('isContactInfoIncomplete', 'isResumeIncomplete', 'isSkillsIncomplete', 'isEmploymentHistoryIncomplete'),\n    disableGeneral: function() {\n        return this.get('isContactInfoIncomplete') || this.get('isResumeIncomplete') \n                       || this.get('isSkillsIncomplete') || this.get('isEmploymentHistoryIncomplete')\n                       || this.get('isEducationHistoryIncomplete');\n    }.property('isContactInfoIncomplete', 'isResumeIncomplete', 'isSkillsIncomplete', \n                            'isEmploymentHistoryIncomplete', 'isEducationHistoryIncomplete'),\n    disableJobSpecific: function() {\n        return this.get('isContactInfoIncomplete') || this.get('isResumeIncomplete') \n                        || this.get('isSkillsIncomplete') || this.get('isEmploymentHistoryIncomplete')\n                        || this.get('isEducationHistoryIncomplete') || this.get('isGeneralIncomplete');\n    }.property('isContactInfoIncomplete', 'isResumeIncomplete', 'isSkillsIncomplete', \n                            'isEmploymentHistoryIncomplete', 'isEducationHistoryIncomplete', 'isGeneralIncomplete'),\n    disableLegallyRequired: function() {\n        return this.get('isContactInfoIncomplete') || this.get('isResumeIncomplete') \n                        || this.get('isSkillsIncomplete') || this.get('isEmploymentHistoryIncomplete')\n                        || this.get('isEducationHistoryIncomplete') || this.get('isGeneralIncomplete') || this.get('isJobSpecificIncomplete');\n    }.property('isContactInfoIncomplete', 'isResumeIncomplete', 'isSkillsIncomplete', \n                            'isEmploymentHistoryIncomplete', 'isEducationHistoryIncomplete', \n                            'isGeneralIncomplete', 'isJobSpecificIncomplete'),\n    actions: {\n        clickNext: function() {\n            var currentPath = this.get('currentPath');\n            var sectionArray = this.get('sectionArray');\n\n            var nextPath = sectionArray[sectionArray.indexOf(currentPath) + 1];\n\n            this.transitionToRoute(nextPath);\n        },\n        clickPrevious: function() {\n            var currentPath = this.get('currentPath');\n            var sectionArray = this.get('sectionArray');\n\n            var nextPath = sectionArray[sectionArray.indexOf(currentPath) - 1];\n\n            this.transitionToRoute(nextPath);\n        }\n    }\n\n});\n\nApp.ContactInfoController = Ember.ObjectController.extend({\n    needs: ['apply'],\n    fieldValuesDidChange: function() {\n        var nameFields = this.get('name');\n        var addressFields = this.get('address');\n        var contactFields = this.get('contact');\n        var self = this;\n\n        var checkEmpty = function(fieldArray) {\n            return fieldArray.filter(function(f) { \n                return Ember.isEmpty(f.value) || Ember.isEmpty(f.value.trim());\n            }).length > 0;\n        };\n\n        var updateApplyController = function(isIncomplete) {\n            var applyController = self.get('controllers.apply');\n\n            if (!Ember.isNone(applyController) && !Ember.isNone(applyController.get('content'))) {\n                applyController.set('isContactInfoIncomplete', isIncomplete);\n            }\n        };\n\n        var areNameFieldsEmpty = checkEmpty(nameFields);\n        var areAddressFieldsEmpty = Ember.isEmpty(addressFields) ? false : checkEmpty(addressFields);\n        var areContactFieldsEmpty = Ember.isEmpty(contactFields) ? false : checkEmpty(contactFields);\n\n        if (areNameFieldsEmpty === true || areAddressFieldsEmpty === true || areContactFieldsEmpty === true) {\n            updateApplyController(true);\n        } else {\n            updateApplyController(false);\n        }\n    }.observes('name.@each.value', 'address.@each.value', 'contact.@each.value')\n});\n\nApp.ResumeController = Ember.ObjectController.extend({\n    needs: ['apply'],\n    fileToUploadDidChange: function() {\n        var resumeFileName = this.get('resumeFileName');\n        \n        this.get('controllers.apply').set('isResumeIncomplete', Ember.isEmpty(resumeFileName) ? true : false);\n    }.observes('resumeFileName'),\n    actions: {\n        clickUploadFromDevice: function() {\n            var fileInput = $('input[type=\"file\"]');\n            fileInput.click();\n        }\n    }\n});\n\nApp.SkillsController = Ember.ObjectController.extend({\n    needs: ['apply'],\n    skillsDidChange: function() {\n        var skills = this.get('selectedSkills');\n\n        this.get('controllers.apply').set('isSkillsIncomplete', Ember.isEmpty(skills) ? true : false);\n    }.observes('selectedSkills')\n});\n\nApp.EmploymentHistoryController = Ember.ArrayController.extend({\n    needs: ['apply'],\n    employmentHistoryYearsBinding: 'controllers.apply.employmentHistoryYears',\n    employmentHistoryDidChenge: function() {\n        var currentHistory = this.get('[]');\n        var employmentHistoryYears = this.get('employmentHistoryYears');\n        var currentHistoryLength = currentHistory.length;\n        var hasEmptyField = false;\n\n        currentHistory.getEach('fields').forEach(function(fieldArray) {\n            var isCurrentField = fieldArray.findBy('name', 'Is_Current__c');\n            var isCurrentChecked;\n            var endDateFields = ['End_Year__c', 'End_Month__c'];\n\n            if (!Ember.isNone(isCurrentField)) {\n                isCurrentChecked = isCurrentField.value;\n            }\n\n            fieldArray.forEach(function(field) {\n                console.log(field);\n                if (endDateFields.indexOf(field.name) !== -1 && isCurrentChecked !== true && Ember.isEmpty(field.value)) {\n                    hasEmptyField = true;\n                } else if (endDateFields.indexOf(field.name) === -1 && Ember.isEmpty(field.value)) {\n                    hasEmptyField = true;\n                }\n            });\n        });\n\n        console.log(hasEmptyField);\n        // calculate fields some how.\n\n        this.get('controllers.apply').set('isEmploymentHistoryIncomplete', hasEmptyField);\n    }.observes('[]', '[].@each.fields'),\n    actions: {\n        clickAddEmploymentHistory: function() {\n            var employmentHistoryBlock = getEmploymentHistoryBlock();\n            this.get('[]').addObject(employmentHistoryBlock);\n        },\n        clickDeleteEmploymentHistory: function(employmentHistoryToDelete) {\n            this.get('[]').removeObject(employmentHistoryToDelete);\n        }\n    }\n});\n\nApp.HistoryFieldController = Ember.ObjectController.extend({\n    valuesDidChange: function() {\n        this.get('parentController').notifyPropertyChange('[].@each.fields');\n    }.observes('value')\n});\n\nApp.EducationHistoryController = Ember.ArrayController.extend({\n    educationHistoryDidChenge: function() {\n     /*   var currentHistory = this.get('[]');\n        var hasEmptyField = false;\n\n        currentHistory.getEach('fields').forEach(function(fieldArray) {\n            var statusField = fieldArray.findBy('name', 'Status__c');\n            var isCurrentlyEnrolled;\n            var endDateFields = ['End_Year__c', 'End_Month__c'];\n\n            if (!Ember.isNone(statusField)) {\n                isCurrentlyEnrolled = isCurrentlyEnrolled.value === 'Currently Enrolled';\n            }\n\n            fieldArray.forEach(function(field) {\n                if (endDateFields.indexOf(field.name) !== -1 && isCurrentChecked !== true && Ember.isEmpty(field.value)) {\n                    hasEmptyField = true;\n                } else if (endDateFields.indexOf(field.name) === -1 && Ember.isEmpty(field.value)) {\n                    hasEmptyField = true;\n                }\n            });\n        });\n\n        this.get('controllers.apply').set('isEducationHistoryIncomplete', hasEmptyField);*/\n    }.observes('[]', '[].@each.fields'),\n    actions: {\n        clickAddEducationHistory: function() {\n            var educationHistoryBlock = getEducationHistoryBlock();\n            this.get('[]').addObject(educationHistoryBlock);\n        },\n        clickDeleteEducationHistory: function(educationHistoryToDelete) {\n            this.get('[]').removeObject(educationHistoryToDelete);\n        }\n    }\n});\n\nApp.FormElementController = Ember.ObjectController.extend({\n    // Element Types\n    isEtNone: function(){\n        return Ember.isNone(this.get('Element_Type__c'));\n    }.property(),\n    isQuestion: function(){\n        return this.get('Element_Type__c') === 'Question';\n    }.property(),\n    isRichText: function(){\n        return this.get('Element_Type__c') === 'Rich Text';\n    }.property(),\n    isHeading: function(){\n        return this.get('Element_Type__c') === 'Heading';\n    }.property(),\n\n    // Answer Types\n    isAtNone: function(){\n        return Ember.isNone(this.get('Answer_Type__c'));\n    }.property(),\n    isRadioButton: function(){\n        return this.get('Answer_Type__c') === 'Radio Buttons';\n    }.property(),\n    isCheckbox: function(){\n        return this.get('Answer_Type__c') === 'Checkboxes';\n    }.property(),\n    isTextField: function(){\n        return this.get('Answer_Type__c') === 'Text Field';\n    }.property(),\n    isParagraph: function(){\n        return this.get('Answer_Type__c') === 'Paragraph';\n    }.property(),\n    isDate: function(){\n        return this.get('Answer_Type__c') === 'Date';\n    }.property(),\n    answerChoices: function(){\n        return !Ember.isNone(this.get('Answer_Choices__r')) ? this.get('Answer_Choices__r').records : null\n    }.property(),\n});\n\n// Routes\nApp.ApplyRoute = Ember.Route.extend( {\n    model: function(params) {\n\n        var hiringModel = JSON.parse(parsedApplyMap.hiringModel.Configuration_Json__c);\n\n        var applicationObj = {\n            resume: {\n                resumeFileName: null,\n                base64fileData: null\n            },\n            companyLogoUrl: companyLogoUrl,\n            sectionArray: ['contactInfo']\n        };\n\n        applicationObj.application = parsedApplyMap.application;\n\n        var linkedInMap = parsedApplyMap.linkedInMap;\n\n        // Setup contact info fields.\n        applicationObj.contactFields = {\n            nameFieldsLabel: parsedApplyMap.nameFieldsLabel,\n            contactFieldsLabel: parsedApplyMap.contactFieldsLabel,\n            addressFieldsLabel: parsedApplyMap.addressFieldsLabel,\n            name: [],\n            contact: [],\n            address: []\n        };\n\n        ['name', 'contact', 'address'].forEach(function(contactSection) {\n            parsedApplyMap[contactSection].forEach(function(field) {\n                if (hiringModel.contactInfo[field.name] === true) {\n                    field.partial = fieldTypeToPartialMap[field.type];\n                    field.value = applicationObj.application[field.name];\n\n                    // if value from application is blank, and user is applying via linked in, pull in that info.\n                    if (Ember.isEmpty(field.value) && !Ember.isNone(linkedInMap) \n                            && !Ember.isNone(appFieldsToLinkedInMap[field.name])) {\n\n                        if (field.name === 'Mobile_Phone__c') {\n                            if (!Ember.isEmpty(linkedInMap.phoneNumbers) && !Ember.isEmpty(linkedInMap.phoneNumbers.values)) {\n                                var mobilePhoneNumberObj = linkedInMap.phoneNumbers.values.findBy('phoneType', 'mobile');\n\n                                if (!Ember.isNone(mobilePhoneNumberObj)) {\n                                    field.value = mobilePhoneNumberObj.phoneNumber;\n                                }\n                            }\n                        } else {\n                            field.value = linkedInMap[appFieldsToLinkedInMap[field.name]];\n                        }\n                    }\n\n                    applicationObj.contactFields[contactSection].addObject(field);\n                }\n            });\n        });\n\n        // Setup application sections\n\n        // Resume section\n        if (hiringModel.resume.isEnabled === true) {\n            applicationObj.isResumeEnabled = true;\n            applicationObj.sectionArray.addObject('resume');\n\n            if (!Ember.isEmpty(parsedApplyMap.resumeFileName)) {\n                applicationObj.resume.resumeFileName = parsedApplyMap.resumeFileName;\n                applicationObj.isResumeIncomplete = false;\n            }\n        } else {\n            applicationObj.isResumeEnabled = false;\n            applicationObj.isResumeIncomplete = false;\n        }\n\n        // Skills section\n        if (hiringModel.skills.isEnabled === true) {\n            applicationObj.isSkillsEnabled = true;\n            applicationObj.sectionArray.addObject('skills');\n\n            applicationObj.skills = {\n                selectedSkills: ''\n            };\n\n            // if we have data\n            if (!Ember.isEmpty(parsedApplyMap.skills)) {\n                var skillsArray = parsedApplyMap.skills.getEach('Skill__r').getEach('Name');\n\n                applicationObj.skills.selectedSkills = skillsArray.join(',');\n            }\n\n            // if we dont have data already but logged in via linkedin\n            if (Ember.isEmpty(applicationObj.skills.selectedSkills) && !Ember.isNone(linkedInMap)\n                    && !Ember.isEmpty(linkedInMap.skills)) {\n                var skillsArray = [];\n                linkedInMap.skills.values.forEach(function(skill) {\n                    skillsArray.addObject(skill.skill.name);\n                });\n                applicationObj.skills.selectedSkills = skillsArray.join(',');\n            }\n        } else {\n            applicationObj.isSkillsEnabled = false;\n            applicationObj.isSkillsIncomplete = false;\n        }\n\n        // Employment History section\n        if (hiringModel.employmentHistory.isEnabled === true) {\n            applicationObj.isEmploymentHistoryEnabled = true;\n            applicationObj.sectionArray.addObject('employmentHistory');\n\n            applicationObj.employmentHistoryYears = hiringModel.employmentHistory.selectedEmploymentHistoryYears;\n            applicationObj.employmentHistoryArray = [];\n\n            if (!Ember.isEmpty(parsedApplyMap.employmentHistories)) {\n                parsedApplyMap.employmentHistories.forEach(function(eh) {\n                    applicationObj.employmentHistoryArray.addObject(getEmploymentHistoryBlock(eh));\n                });\n            }\n\n            // if we don't have data already but have logged in via linkedin\n            if (Ember.isEmpty(applicationObj.employmentHistoryArray) && !Ember.isNone(linkedInMap) \n                    && !Ember.isEmpty(linkedInMap.positions)) {\n                var employmentHistoryObjs = convertLinkedInToEmploymentHistoryObj(linkedInMap.positions.values);\n                employmentHistoryObjs.forEach(function(eh) {\n                    applicationObj.employmentHistoryArray.addObject(getEmploymentHistoryBlock(eh));\n                });\n            }  \n\n            if (Ember.isEmpty(applicationObj.employmentHistoryArray)) {\n                applicationObj.employmentHistoryArray.addObject(getEmploymentHistoryBlock());\n            }\n        } else {\n            applicationObj.isEmploymentHistoryEnabled = false;\n            applicationObj.isEmploymentHistoryIncomplete = false;\n        }\n\n        // Education History section\n        if (hiringModel.educationHistory.isEnabled === true) {\n            applicationObj.isEducationHistoryEnabled = true;\n            applicationObj.sectionArray.addObject('educationHistory');\n\n            applicationObj.educationHistoryArray = [];\n\n            // if we have data already.\n            if (!Ember.isEmpty(parsedApplyMap.educationHistories)) {\n                parsedApplyMap.educationHistories.forEach(function(eh) {\n                    applicationObj.educationHistoryArray.addObject(getEducationHistoryBlock(eh));\n                });\n            }\n\n            // if we don't have data already but have logged in via linkedin\n            if (Ember.isEmpty(applicationObj.educationHistoryArray) && !Ember.isNone(linkedInMap) \n                    && !Ember.isEmpty(linkedInMap.educations)) {\n                var educationHistoryObjs = convertLinkedInToEduationHistoryObj(linkedInMap.educations.values);\n                educationHistoryObjs.forEach(function(eh) {\n                    applicationObj.educationHistoryArray.addObject(getEducationHistoryBlock(eh));\n                });\n            }  \n\n            // if we don't have any data at all.\n            if (Ember.isEmpty(applicationObj.educationHistoryArray)) {\n                applicationObj.educationHistoryArray.addObject(getEducationHistoryBlock());\n            }\n        } else {\n            applicationObj.isEducationHistoryEnabled = false;\n            applicationObj.isEducationHistoryIncomplete = false;\n        }\n\n        applicationObj.sectionArray.addObjects(['general', 'jobSpecific', 'legallyRequired']);\n\n        // Check if we have general data\n        applicationObj.generalFormElements = parsedApplyMap.generalFormElements;\n        applicationObj.isGeneralIncomplete = true;\n\n        if (!Ember.isEmpty(parsedApplyMap.generalApplicantResponses)) {\n            parsedApplyMap.generalApplicantResponses.forEach(function(aR) {\n                var feToUpdate = applicationObj.generalFormElements.findBy('Id', aR.Form_Element__c);\n\n                if (!Ember.isNone(feToUpdate)) {\n                    feToUpdate.applicantResponseId = aR.Id;\n                    feToUpdate.value = aR.Value__c;\n                }\n\n            });\n\n            if (parsedApplyMap.generalApplicantResponses.length === applicationObj.generalFormElements.length) {\n                applicationObj.isGeneralIncomplete = false;\n            }\n        }\n\n\n        // Check if we have job specific data\n\n        applicationObj.isJobSpecificIncomplete = true;\n        applicationObj.jobSpecificFormElements = parsedApplyMap.jobSpecificFormElements;\n\n        if(!Ember.isEmpty(parsedApplyMap.jobSpecificApplicantResponses)) {\n            parsedApplyMap.jobSpecificApplicantResponses.forEach(function(aR) {\n                var feToUpdate = applicationObj.jobSpecificFormElements.findBy('Id', aR.Form_Element__c);\n\n                if (!Ember.isNone(feToUpdate)) {\n                    feToUpdate.applicantResponseId = aR.Id;\n                    feToUpdate.value = aR.Value__c;\n                }\n            });\n\n            if (parsedApplyMap.jobSpecificApplicantResponses.length === applicationObj.jobSpecificFormElements.length) {\n                applicationObj.isJobSpecificIncomplete = false;\n            }\n        }\n\n        // Check if we have legal data\n        applicationObj.legalFormElements = parsedApplyMap.legalFormElements;\n        applicationObj.isLegallyRequiredIncomplete = true;\n\n        if(!Ember.isEmpty(parsedApplyMap.legalApplicantRequiredData)) {\n            parsedApplyMap.legalApplicantRequiredData.forEach(function(aRD) {\n                var feToUpdate = applicationObj.legalFormElements.findBy('Id', aRD.Form_Element__c);\n\n                if (!Ember.isNone(feToUpdate)) {\n                    feToUpdate.applicantRequiredDataId = aRD.Id;\n                    feToUpdate.value = aRD.Value__c;\n                }\n            });\n\n            if (parsedApplyMap.legalApplicantRequiredData.length === applicationObj.legalFormElements.length) {\n                applicationObj.isLegallyRequiredIncomplete = false;\n            }\n        }\n\n        applicationObj.numSections = applicationObj.sectionArray.length;\n\n        console.log('***MODEL');\n        console.log(applicationObj);\n        return applicationObj\n    },\n    beforeModel: function(transition) {\n        this.transitionTo('contactInfo');\n    }\n});\n\nApp.ContactInfoRoute = Ember.Route.extend({\n    model: function(params) {\n        return this.modelFor('apply').contactFields;\n    },\n    setupController: function(controller, model) {\n        controller.set('model', model);\n        controller.notifyPropertyChange('name.@each.value');\n    },\n    actions: {\n        willTransition: function(transition) {\n            var apply = this.modelFor('apply');\n            var contactInfoObj = {\n                Id: appId\n            };\n\n            ['name', 'contact', 'address'].forEach(function(section) {\n                apply.contactFields[section].forEach(function(f) {\n                    contactInfoObj[f.name] = f.value;\n                });\n            });\n\n            cont.saveContactInfo(JSON.stringify(contactInfoObj), function(res, evt) {\n                if (res) {\n                    var parsedResult = parseResult(res);\n\n                    if (Ember.isEmpty(parsedResult.errorMessages)) {\n                        console.log(parsedResult.data);\n                    } else {\n                        console.log(parsedResult.errorMessages[0]);\n                    }\n                } else {\n\n                }\n            });\n        }\n    }\n}); \n\nApp.ResumeRoute = Ember.Route.extend({\n    model: function(params) {\n        return this.modelFor('apply').resume;\n    },\n    setupController: function(controller, model) {\n        controller.set('model', model);\n        controller.notifyPropertyChange('resumeFileName');\n    },\n    actions: {\n        willTransition: function(transition) {\n            var applyModel = this.modelFor('apply');\n            var resume = this.modelFor('resume');\n            var base64String = resume.base64fileData;\n            var fileName = resume.resumeFileName;\n\n            if (!Ember.isNone(base64String)) {\n                console.log('upload');\n                \n                cont.uploadResume(base64String, fileName, appId, function(res, evt) {\n                    if (res) {\n                        var parsedResult = parseResult(res);\n                        console.log(parsedResult);\n                        if (Ember.isEmpty(parsedResult.errorMessages)) {\n                            console.log(parsedResult.data);\n                        } else {\n                            console.log(parsedResult.errorMessages[0]);\n                        }\n                    } else {\n                        console.log(evt);\n                        // error\n                    }\n                });\n            }   \n        }\n    }\n});\n\nApp.SkillsRoute = Ember.Route.extend({\n    model: function(params) {\n        return this.modelFor('apply').skills;\n    },\n    setupController: function(controller, model) {\n        controller.set('model', model);\n    },\n    actions: {\n        willTransition: function(transition) {\n            var applyModel = this.modelFor('apply');\n            var skillsModel = this.modelFor('skills');\n            var selectedSkillsString = skillsModel.selectedSkills;\n            var selectedSkills = [];\n            \n            if (!Ember.isEmpty(selectedSkillsString)) {\n                selectedSkills = selectedSkillsString.split(',');\n            }\n\n            var saveObj = {\n                applicationId: appId,\n                skills: selectedSkills,\n                flattenedSkills: selectedSkillsString.replace(/,/g, ', ')\n            };\n\n            var callback = function(parsedResult) {\n                console.log(parsedResult);\n            };\n\n            cont.saveSkills(JSON.stringify(saveObj), generateRemoteActionCallback(self, callback, false));\n        }\n    }\n});\n\nApp.EmploymentHistoryRoute = Ember.Route.extend({\n    model: function(params) {\n        return this.modelFor('apply').employmentHistoryArray;\n    },\n    setupController: function(controller, model) {\n        controller.set('model', model);\n    },\n    actions: {\n        willTransition: function(transition) {\n            var applyModel = this.modelFor('apply');\n            var employmentHistoryObjArray = [];\n            var flattenedEmploymentHistory = '';\n\n            applyModel.employmentHistoryArray.forEach(function(eh) {\n                var employmentHistoryObj = {\n                    Id: eh.Id,\n                    eId: eh.eId,\n                    Application__c: appId\n                };\n\n                eh.fields.forEach(function(field) {\n                    employmentHistoryObj[field.name] = field.value;\n                });\n\n                // add employment history to flattened string\n                flattenedEmploymentHistory += employmentHistoryObj.Name + '\\n'\n                            + employmentHistoryObj.Job_Title__c + '\\n'\n                            + employmentHistoryObj.Start_Date__c + ' - ';\n\n                if (employmentHistoryObj.Is_Current__c == true) {\n                    flattenedEmploymentHistory += 'present';\n                } else if (employmentHistoryObj.End_Date__c != null) {\n                    flattenedEmploymentHistory += employmentHistoryObj.End_Date__c;\n                }\n\n                flattenedEmploymentHistory += '\\n\\n';\n\n                employmentHistoryObjArray.addObject(employmentHistoryObj);\n            });\n\n            var employmentHistoriesObj = {\n                employmentHistories: employmentHistoryObjArray,\n                appId: appId,\n                flattenedEmploymentHistory: flattenedEmploymentHistory\n            };\n\n            var successCallback = function(parsedResult) {\n                console.log(parsedResult);\n\n                Object.keys(parsedResult.data.eIdToEHMap).forEach(function(eId) {\n                    var eHToUpdate = applyModel.employmentHistoryArray.findBy('eId', parseInt(eId));\n                    eHToUpdate.Id = parsedResult.data.eIdToEHMap[eId].Id;\n                });\n\n                console.log(applyModel.employmentHistoryArray);\n            };\n\n            cont.saveEmploymentHistory(JSON.stringify(employmentHistoriesObj), generateRemoteActionCallback(self, successCallback, false));\n        }\n    }\n});\n\nApp.EducationHistoryRoute = Ember.Route.extend({\n    model: function(params) {\n        return this.modelFor('apply').educationHistoryArray;\n    },\n    setupController: function(controller, model) {\n        controller.set('model', model);\n    },\n    actions: {\n        willTransition: function(transition) {\n            var applyModel = this.modelFor('apply');\n            var educationHistoryModel = this.modelFor('educationHistory');\n            var educationHistoryObjArray = [];\n            var flattenedEducationHistory = '';\n\n            applyModel.educationHistoryArray.forEach(function(eh) {\n                var educationHistoryObj = {\n                    eId: eh.eId,\n                    Id: eh.Id,\n                    Application__c: appId\n                };\n\n                eh.fields.forEach(function(field) {\n                    educationHistoryObj[field.name] = field.value;\n                });\n\n                // add education history to flattened string\n                flattenedEducationHistory += educationHistoryObj.Name__c + '\\n'\n                            + educationHistoryObj.Education_Level__c;\n\n                if (!Ember.isNone(educationHistoryObj.Status__c)) {\n                    flattenedEducationHistory += ' (' + educationHistoryObj.Status__c + ')';\n                } \n                \n                flattenedEducationHistory += '\\n' \n                                          + educationHistoryObj.Start_Date__c + ' - ' + educationHistoryObj.End_Date__c\n                                          + '\\n\\n';\n\n                educationHistoryObjArray.addObject(educationHistoryObj);\n            });\n\n            var educationHistoriesObj = {\n                educationHistories: educationHistoryObjArray,\n                appId: appId,\n                flattenedEducationHistory: flattenedEducationHistory\n            };\n\n            var successCallback = function(parsedResult) {\n                console.log(parsedResult);\n\n                Object.keys(parsedResult.data.eIdToEHMap).forEach(function(eId) {\n                    var eHToUpdate = educationHistoryModel.findBy('eId', parseInt(eId));\n                    eHToUpdate.Id = parsedResult.data.eIdToEHMap[eId].Id;\n                });\n\n                console.log(applyModel.educationHistoryArray);\n            };\n\n            cont.saveEducationHistory(JSON.stringify(educationHistoriesObj), generateRemoteActionCallback(self, successCallback, false));\n        }\n    }\n});\n\nApp.GeneralRoute = Ember.Route.extend({\n    model: function(params) {\n        return this.modelFor('apply').generalFormElements;\n    },\n    actions: {\n        willTransition: function(transition) {\n            var formElementAnswers = this.modelFor('general');\n            if (!Ember.isEmpty(formElementAnswers)) {\n                var applicantResponseObj = createApplicantResponseObj(formElementAnswers);\n\n                var callback = function(parsedResult) {\n                    // Use Form Element as a unique identifier since we'll never have two answer responses\n                    // for the same form element on an application.\n                    Object.keys(parsedResult.data.feIdToARMap).forEach(function(feId) {\n                        var aRToUpdate = formElementAnswers.findBy('Id', feId);\n                        aRToUpdate.applicantResponseId = parsedResult.data.feIdToARMap[feId].Id;\n                    });\n                };\n\n                var generalSaveObj = {\n                    applicantResponses: applicantResponseObj\n                };\n\n                cont.saveApplicantResponses(JSON.stringify(generalSaveObj), generateRemoteActionCallback(self, callback, false));\n            }   \n        }\n    }\n});\n\n\nApp.JobSpecificRoute = Ember.Route.extend({\n    model: function(params) {\n        return this.modelFor('apply').jobSpecificFormElements;\n    },\n    actions: {\n        willTransition: function(transition) {\n            var formElementAnswers = this.modelFor('jobSpecific');\n            var applicantResponseObj = createApplicantResponseObj(formElementAnswers);\n\n            var callback = function(parsedResult) {\n                // Use Form Element as a unique identifier since we'll never have two answer responses\n                // for the same form element on an application.\n                Object.keys(parsedResult.data.feIdToARMap).forEach(function(feId) {\n                    var aRToUpdate = formElementAnswers.findBy('Id', feId);\n                    aRToUpdate.applicantResponseId = parsedResult.data.feIdToARMap[feId].Id;\n                });\n            };\n\n            var jobSpecificSaveObj = {\n                applicantResponses: applicantResponseObj\n            };\n\n            cont.saveApplicantResponses(JSON.stringify(jobSpecificSaveObj), generateRemoteActionCallback(self, callback, false));\n        }\n    }\n});\n\nApp.LegallyRequiredRoute = Ember.Route.extend({\n    model: function(params) {\n        return this.modelFor('apply').legalFormElements;\n    },\n    actions: {\n        willTransition: function(transition) {\n            var formElementAnswers = this.modelFor('legallyRequired');\n            var applicantRequiredDataObj = createApplicantRequiredDataObj(formElementAnswers);\n\n            var callback = function(parsedResult) {\n                // Use Form Element as a unique identifier since we'll never have two answer responses\n                // for the same form element on an application.\n                Object.keys(parsedResult.data.feIdToARDMap).forEach(function(feId) {\n                    var aRDToUpdate = formElementAnswers.findBy('Id', feId);\n                    aRDToUpdate.applicantRequiredDataId = parsedResult.data.feIdToARDMap[feId].Id;\n                });\n            };\n\n            var legallyRequiredSaveObj = {\n                applicantRequiredDatas: applicantRequiredDataObj\n            };\n\n            cont.saveApplicantRequiredData(JSON.stringify(legallyRequiredSaveObj), generateRemoteActionCallback(self, callback, false));\n        }\n    }\n});\n\n\n\n// Router\nApp.Router.map(function() {\n    this.resource('apply', { path: '/' }, function() {\n        this.resource('contactInfo', { path: '/contactInfo' });\n        this.resource('resume', { path: '/resume' });\n        this.resource('skills', { path: '/skills' });\n        this.resource('employmentHistory', { path: '/employmentHistory' });\n        this.resource('educationHistory', { path: '/educationHistory' });\n        this.resource('general', { path: '/general' });\n        this.resource('jobSpecific', { path: '/jobSpecific' });\n        this.resource('legallyRequired', { path: '/legallyRequired' });\n\n    });\n});\n\n\n// This setting disables the detail routing from showing up in the navbar.\nApp.Router.reopen( {\n    location: 'none'\n});\n\n})();//@ sourceURL=app/applyProtoApp.js")

eval("(function() {\n\n// Standard JUI date picker component\n// Usage: {{date-picker value=[date value to bind to your controller]}}\nApp.DatePickerComponent = Ember.Component.extend({\n    attributeBindings: ['includeToday', 'disabled'],\n    layoutName: 'components/datepicker',\n    didInsertElement: function() {\n\n        var self = this\n            , dateValue = this.get('value')\n            , disabled = this.get('disabled')\n            , currentDate = moment()\n            , includeToday = this.get('includeToday')\n            , $element = this.$()\n            , $datepicker = $element.find('.datepicker')\n            , $input = $element.find('input')\n            , locale = typeof localeString === 'undefined' ? 'YYYY-MM-DD' : localeString;\n\n            $datepicker.datepicker({\n                    format: locale.toLowerCase(),\n                    onRender: function(date) {\n                        if (disabled === true) {\n                            return 'disabled';\n\n                        } else {\n                            if (includeToday === true) \n                                return date.valueOf() < moment(currentDate).subtract('days', 1).valueOf() ? 'disabled' : '';\n                        }\n                    }\n                })\n                .on('changeDate', function(event) {\n                    self.set('value', moment(event.date).format('YYYY-MM-DD'));\n                    $input.val(moment(event.date).format(locale));\n                   \n                    $datepicker.datepicker('hide');\n                });\n                //.datepicker('setValue', moment(dateValue).toDate());\n\n            if (!Ember.isNone(dateValue)) {\n                $input.val(moment(dateValue).format(locale));\n            }\n    }\n});\n\n// Salesforce Rich Text Editor component\n// Usage: In the body tag of the VF page you are editing, insert an apex rich text tag inside a div with id 'richTextForm'\n// then in your template: {{rich-text componentId=[this elements id if you need it] value=[rich text to bind to your controller]}}\n// Attributes:\n// componentId - This is the Id of the element you have created, can be useful if you need to jQuery for it.\n// bindingType - You can specify the component to bind its 'value' property to the 'html' or 'text' content of the rich text field.\n//               If unspecified, it will not bind at all.\n// autofocus - Whether the cursor should autofocus on the component when it is added to the DOM.\nApp.RichTextComponent = Ember.Component.extend({\n    attributeBindings: ['componentId', 'bindingType', 'autofocus', 'height'],\n    previousContent: '',\n    didInsertElement: function() {\n        var self = this\n            , richTextForm= $('#richTextForm')\n            , value = this.get('value')\n            , bindingType = this.get('bindingType')\n            , autofocus = this.get('autofocus')\n            , height = this.get('height')\n            , pollCounter = 0; // We should set a max amount of polling incase the component launches but the user switches the view right away.\n\n        richTextForm.find('.cke').remove();\n        this.$().append(richTextForm.html());\n        this.set('componentId', this.get('elementId'));\n\n        // We have to constantly poll for Salesforce to finish rendering the rich text field before updating its value.\n        var pollForRTF = setInterval(function(){ \n            pollCounter++;\n\n            if (pollCounter > 50) {\n                clearInterval(pollForRTF);\n            }\n\n            if (!Ember.isEmpty(self.$())) { // A little more checking in case user navigates to another view right away\n                var rtfField = self.$().find('iframe').contents();\n\n                if (rtfField.length > 0 && rtfField.find('body').length > 0) {\n                    clearInterval(pollForRTF);\n                    \n                    // This run later and re-finding of the body is a mod to make the RTF values populate in Firefox\n                    Ember.run.later(this, function() {\n                        if (!Ember.isEmpty(self.$())) { // A little more checking in case user navigates to another view right away\n                        \n                            var rtfBody = self.$().find('iframe').contents().find('body');\n                            if (autofocus === true) {\n                                rtfBody.focus();\n                            }\n\n                            if (!Ember.isNone(value)) {\n                                rtfBody.html(value);\n                            }\n                            \n                            if (!Ember.isNone(height)) {\n                                self.$().find('.cke_contents').height(height);\n                            }\n\n                            if (bindingType === 'html') {\n                                rtfBody.keyup(function(e) {\n                                    var richText = $(e.target);\n\n                                    richText.find('[style]').removeAttr('style');\n                                    richText.find('[class]').removeAttr('class');\n\n                                    var currentContent = richText.html();\n                                    var previousContent = self.get('previousContent');\n\n                                    self.set('value', currentContent);\n                                    self.set('previousContent', currentContent);\n                                });\n                            } else if (bindingType === 'text') {\n                                rtfBody.keyup(function(e) {\n                                    var richText = $(e.target);\n\n                                    richText.find('[style]').removeAttr('style');\n                                    richText.find('[class]').removeAttr('class');\n\n                                    var currentContent = richText.html();\n                                    var previousContent = self.get('previousContent');\n\n                                    self.set('value', e.target.textContent);\n                                    self.set('previousContent', currentContent);\n                                });\n                            }\n                        }\n                    }, 300);\n                }\n            }\n        }, 300);\n    }\n});\n\n})();//@ sourceURL=../js/emberComponents.js")