eval("(function() {\n\n// Add a labels property to every controller so that we don't have to access the global scope (which was deprecated).\nEmber.ControllerMixin.reopen({\n    labels: labels\n});\n\n// Attribute bindings for QA locators so we can easily add them to ember markup.\nEmber.View.reopen({\n    attributeBindings: ['data-dev', 'data-qa', 'data-qa-label', 'data-qa-button', 'data-qa-input', \n                        'data-qa-link', 'data-qa-pane', 'data-qa-select', 'da-qa-modal', 'data-qa-alert',\n                        'data-qa-container'],\n    didInsertElement : function(){\n        this._super();\n\n        Ember.run.scheduleOnce('afterRender', this, this.initJUI);   \n    },\n    initJUI: function() {\n        // Initialize tooltips if they exist. This might actually be expensive since it's run every time a new view is added. Will refactor.\n        /*if ($('[data-toggle=\"tooltip\"]').length > 0) {\n            $('body').tooltip({\n                selector: '[data-toggle=tooltip]'\n            });\n        }*/\n        this.afterRenderEvent();\n    },\n    afterRenderEvent : function() {\n        // implement this hook in your own subclasses and run your jQuery logic there\n    }\n});\n\n})();//@ sourceURL=../../js/emberBase.js")

eval("(function() {\n\n// Standard JUI date picker component\n// Usage: {{date-picker value=[date value to bind to your controller]}}\nApp.DatePickerComponent = Ember.Component.extend({\n    attributeBindings: ['includeToday', 'disabled'],\n    layoutName: 'components/datepicker',\n    didInsertElement: function() {\n\n        var self = this\n            , dateValue = this.get('value')\n            , disabled = this.get('disabled')\n            , currentDate = moment()\n            , includeToday = this.get('includeToday')\n            , $element = this.$()\n            , $datepicker = $element.find('.datepicker')\n            , $input = $element.find('input')\n            , locale = typeof localeString === 'undefined' ? 'YYYY-MM-DD' : localeString;\n\n            $datepicker.datepicker({\n                    format: locale.toLowerCase(),\n                    onRender: function(date) {\n                        if (disabled === true) {\n                            return 'disabled';\n\n                        } else {\n                            if (includeToday === true) \n                                return date.valueOf() < moment(currentDate).subtract('days', 1).valueOf() ? 'disabled' : '';\n                        }\n                    }\n                })\n                .on('changeDate', function(event) {\n                    self.set('value', moment(event.date).format('YYYY-MM-DD'));\n                    $input.val(moment(event.date).format(locale));\n                   \n                    $datepicker.datepicker('hide');\n                })\n                // .datepicker('setValue', moment(dateValue).toDate());\n\n            if (!Ember.isNone(dateValue)) {\n                $input.val(moment(dateValue).format(locale));\n                $datepicker.datepicker('setValue', moment(dateValue).toDate());\n            }\n    }\n});\n\n// Salesforce Rich Text Editor component\n// Usage: In the body tag of the VF page you are editing, insert an apex rich text tag inside a div with id 'richTextForm'\n// then in your template: {{rich-text componentId=[this elements id if you need it] value=[rich text to bind to your controller]}}\n// Attributes:\n// componentId - This is the Id of the element you have created, can be useful if you need to jQuery for it.\n// bindingType - You can specify the component to bind its 'value' property to the 'html' or 'text' content of the rich text field.\n//               If unspecified, it will not bind at all.\n// autofocus - Whether the cursor should autofocus on the component when it is added to the DOM.\nApp.RichTextComponent = Ember.Component.extend({\n    attributeBindings: ['componentId', 'bindingType', 'autofocus', 'height'],\n    previousContent: '',\n    didInsertElement: function() {\n        var self = this\n            , richTextForm= $('#richTextForm')\n            , value = this.get('value')\n            , bindingType = this.get('bindingType')\n            , autofocus = this.get('autofocus')\n            , height = this.get('height')\n            , pollCounter = 0; // We should set a max amount of polling incase the component launches but the user switches the view right away.\n\n        richTextForm.find('.cke').remove();\n        this.$().append(richTextForm.html());\n        this.set('componentId', this.get('elementId'));\n\n        // We have to constantly poll for Salesforce to finish rendering the rich text field before updating its value.\n        var pollForRTF = setInterval(function(){ \n            pollCounter++;\n\n            if (pollCounter > 50) {\n                clearInterval(pollForRTF);\n            }\n\n            if (!Ember.isEmpty(self.$())) { // A little more checking in case user navigates to another view right away\n                var rtfField = self.$().find('iframe').contents();\n\n                if (rtfField.length > 0 && rtfField.find('body').length > 0) {\n                    clearInterval(pollForRTF);\n                    \n                    // This run later and re-finding of the body is a mod to make the RTF values populate in Firefox\n                    Ember.run.later(this, function() {\n                        if (!Ember.isEmpty(self.$())) { // A little more checking in case user navigates to another view right away\n                        \n                            var rtfBody = self.$().find('iframe').contents().find('body');\n                            if (autofocus === true) {\n                                rtfBody.focus();\n                            }\n\n                            if (!Ember.isNone(value)) {\n                                rtfBody.html(value);\n                            }\n                            \n                            if (!Ember.isNone(height)) {\n                                self.$().find('.cke_contents').height(height);\n                            }\n\n                            if (bindingType === 'html') {\n                                rtfBody.keyup(function(e) {\n                                    var richText = $(e.target);\n\n                                    richText.find('[style]').removeAttr('style');\n                                    richText.find('[class]').removeAttr('class');\n\n                                    var currentContent = richText.html();\n                                    var previousContent = self.get('previousContent');\n\n                                    self.set('value', currentContent);\n                                    self.set('previousContent', currentContent);\n                                });\n                            } else if (bindingType === 'text') {\n                                rtfBody.keyup(function(e) {\n                                    var richText = $(e.target);\n\n                                    richText.find('[style]').removeAttr('style');\n                                    richText.find('[class]').removeAttr('class');\n\n                                    var currentContent = richText.html();\n                                    var previousContent = self.get('previousContent');\n\n                                    self.set('value', e.target.textContent);\n                                    self.set('previousContent', currentContent);\n                                });\n                            }\n                        }\n                    }, 300);\n                }\n            }\n        }, 300);\n    }\n});\n\n})();//@ sourceURL=../../js/emberComponents.js")