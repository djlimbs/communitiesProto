eval("(function() {\n\n// Add a labels property to every controller so that we don't have to access the global scope (which was deprecated).\nEmber.ControllerMixin.reopen({\n    labels: labels\n});\n\n// Attribute bindings for QA locators so we can easily add them to ember markup.\nEmber.View.reopen({\n    attributeBindings: ['data-dev', 'data-qa', 'data-qa-label', 'data-qa-button', 'data-qa-input', \n                        'data-qa-link', 'data-qa-pane', 'data-qa-select', 'da-qa-modal', 'data-qa-alert',\n                        'data-qa-container'],\n    didInsertElement : function(){\n        this._super();\n\n        Ember.run.scheduleOnce('afterRender', this, this.initJUI);   \n    },\n    initJUI: function() {\n        // Initialize tooltips if they exist. This might actually be expensive since it's run every time a new view is added. Will refactor.\n        /*if ($('[data-toggle=\"tooltip\"]').length > 0) {\n            $('body').tooltip({\n                selector: '[data-toggle=tooltip]'\n            });\n        }*/\n        this.afterRenderEvent();\n    },\n    afterRenderEvent : function() {\n        // implement this hook in your own subclasses and run your jQuery logic there\n    }\n});\n\n})();//@ sourceURL=../../js/emberBase.js")

eval("(function() {\n\nEmber.TEMPLATES[\"_answerInput\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n            <li data-toggle=\\\"tooltip\\\" data-placement=\\\"left\\\" title=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"labels.upvote\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":inline-block :upVote isThumbsUp:active\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickVote\", \"upVote\", {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-icon=\\\"upVote\\\">\\n                <span class=\\\"juicon juicon-like pad--sm--ls component__icon text-faded\\\"></span>\\n            </li>\\n            <li data-toggle=\\\"tooltip\\\" data-placement=\\\"left\\\" title=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"labels.downvote\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":inline-block :downVote isThumbsDown:active\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickVote\", \"downVote\", {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-icon=\\\"thumbsDown\\\">\\n                <span class=\\\"juicon juicon-dislike pad--sm--ls component__icon text-faded\\\"></span>\\n            </li>\\n            <li data-toggle=\\\"tooltip\\\" data-placement=\\\"left\\\" title=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"labels.disqualify\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":inline-block :disqualify isDisqualify:active\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickVote\", \"disqualify\", {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-icon=\\\"disqualify\\\">\\n                <span class=\\\"juicon juicon-ban pad--sm--ls component__icon text-faded\\\"></span>\\n            </li>\\n        \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"panel__component\\\">\\n    <ul class=\\\"list-style-type-none inline-block input-size mar--sm--n text-right float--right\\\">\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"isInLegal\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        <li data-toggle=\\\"tooltip\\\" data-placement=\\\"left\\\" title=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"labels.deleteThisChoice\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" class=\\\"inline-block scoreOption relative\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickDelete\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-icon=\\\"delete\\\">\\n            <span class=\\\"juicon juicon-trash component__icon text-faded pad--sm--ls\\\" data-toggle=\\\"dropdown\\\"></span>\\n        </li>\\n    </ul>\\n    <div class=\\\"\\\" style=\\\"padding-right: 120px;\\\">\\n        <div class=\\\"form__group\\\">\\n            \");\n  hashContexts = {'class': depth0,'type': depth0,'placeholder': depth0,'value': depth0,'action': depth0,'maxlength': depth0,'data-qa-input': depth0};\n  hashTypes = {'class': \"STRING\",'type': \"STRING\",'placeholder': \"ID\",'value': \"ID\",'action': \"STRING\",'maxlength': \"STRING\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'class': (\"answerInput\"),\n    'type': (\"text\"),\n    'placeholder': (\"labels.typeAnAnswer\"),\n    'value': (\"model.Value__c\"),\n    'action': (\"clickAddAnswer\"),\n    'maxlength': (\"255\"),\n    'data-qa-input': (\"answerChoice\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n            <small class=\\\"input-error-content\\\"></small>\\n        </div>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_editCheckboxes\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"answerInput\", options) : helperMissing.call(depth0, \"partial\", \"answerInput\", options))));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n    <div class=\\\"panel__component\\\">\\n        <button type=\\\"button\\\" class=\\\"button button--primary button--ghost\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickAddAnswer\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"addAnswerChoice\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.addAnswerChoice\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</button>\\n    </div>\\n\");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"list-heading\\\">\\n    <h4 class=\\\"list-heading__title\\\" data-qa-label=\\\"questionText\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.questionText\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n</div>\\n<div class=\\\"panel__body\\\">\\n    <div class=\\\"form__group mar--sm--bn\\\">\\n        \");\n  hashContexts = {'class': depth0,'placeholder': depth0,'value': depth0,'maxlength': depth0,'data-qa-input': depth0};\n  hashTypes = {'class': \"STRING\",'placeholder': \"ID\",'value': \"ID\",'maxlength': \"STRING\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'class': (\"elementInput\"),\n    'placeholder': (\"labels.typeYourQuestionHere\"),\n    'value': (\"model.Text__c\"),\n    'maxlength': (\"1000\"),\n    'data-qa-input': (\"questionText\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.textarea || (depth0 && depth0.textarea)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n  data.buffer.push(\"\\n    </div>\\n</div>\\n<div class=\\\"list-heading\\\">\\n    <h4 class=\\\"list-heading__title\\\" data-qa-label=\\\"answerChoice\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.answerChoices\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n</div>\\n\");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack2 = helpers.each.call(depth0, \"answers\", {hash:{\n    'itemController': (\"answer\")\n  },inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers.unless.call(depth0, \"isAtMaxAnswers\", {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_editDate\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  data.buffer.push(\"<div class=\\\"list-heading\\\">\\n    <h4 class=\\\"list-heading__title\\\" data-qa-label=\\\"questionText\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.questionText\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n</div>\\n<div class=\\\"panel__body\\\">\\n    <div class=\\\"form__group mar--sm--bn\\\">\\n        \");\n  hashContexts = {'class': depth0,'placeholder': depth0,'value': depth0,'maxlength': depth0,'data-qa-input': depth0};\n  hashTypes = {'class': \"STRING\",'placeholder': \"ID\",'value': \"ID\",'maxlength': \"STRING\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'class': (\"elementInput\"),\n    'placeholder': (\"labels.typeYourQuestionHere\"),\n    'value': (\"model.Text__c\"),\n    'maxlength': (\"1000\"),\n    'data-qa-input': (\"questionText\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.textarea || (depth0 && depth0.textarea)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_editFormElement\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                    <div class=\\\"form__group answerType\\\">\\n                        <label class=\\\"\\\" data-qa-label=\\\"answerType\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.answerType\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n                        <div class=\\\"select__wrap\\\">\\n                            <div class=\\\"input__icon juicon juicon-down\\\"></div>\\n                            \");\n  hashContexts = {'content': depth0,'value': depth0,'data-qa-input': depth0};\n  hashTypes = {'content': \"ID\",'value': \"ID\",'data-qa-input': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"select\", {hash:{\n    'content': (\"answerTypes\"),\n    'value': (\"model.Answer_Type__c\"),\n    'data-qa-input': (\"answerType\")\n  },contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                        </div>\\n                    </div>\\n                \");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n            <p class=\\\"text-center mar--sm--tm\\\">\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.areYouSureYouWantToDelete\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" <a href=\\\"\\\" class=\\\"text-underline mar--sm--lm\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickCancelDelete\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.noDontDelete\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a><a href=\\\"\\\" class=\\\"text-error text-underline mar--sm--lm\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickConfirmDelete\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.yesDelete\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a>\\n            </p>\\n        \");\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"isNew\", {hash:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\nfunction program6(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                 <p class=\\\"text-center text-error mar--sm--tm\\\">\\n                    <a href=\\\"\\\" class=\\\"deleteBlock\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickDelete\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"><span class=\\\"juicon juicon-trash text-error\\\"></span> <span class=\\\"text-error\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.delete\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span></a>\\n                </p>\\n            \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"building-block has-hidden-items edit-this\\\">\\n    <div class=\\\"building-block__edit\\\">\\n        <div class=\\\"panel\\\">\\n            <div class=\\\"panel__top\\\">\\n                <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary :float--right mar--sm--only--ts doesNotHaveEnoughInfo:disabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"ID\"};\n  options = {hash:{\n    'disabled': (\"doesNotHaveEnoughInfo\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickDone\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"done\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.done\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" <span class=\\\"juicon juicon-check\\\"></span></button>\\n                <button class=\\\"button button--secondary float--left mar--md--rxs mar--sm--only--ts\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickCancel\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"cancel\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.cancel\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</button>\\n            </div>\\n            <div class=\\\"list-heading\\\">\\n                <h4 class=\\\"list-heading__title\\\" data-qa-label=\\\"options\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.options\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                </h4>\\n            </div>\\n            <div class=\\\"panel__body pad--sm--bn\\\">\\n                <div class=\\\"form__group\\\">\\n                    <label class=\\\"\\\" data-qa-label=\\\"elementType\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.elementType\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n                    <div class=\\\"select__wrap\\\">\\n                        <div class=\\\"input__icon juicon juicon-down\\\"></div>\\n                        \");\n  hashContexts = {'content': depth0,'value': depth0,'data-qa-select': depth0};\n  hashTypes = {'content': \"ID\",'value': \"ID\",'data-qa-select': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"select\", {hash:{\n    'content': (\"elementTypes\"),\n    'value': (\"model.Element_Type__c\"),\n    'data-qa-select': (\"elementType\")\n  },contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                    </div>\\n                </div>\\n                \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isQuestionType\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n            </div>\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"editTemplate\", options) : helperMissing.call(depth0, \"partial\", \"editTemplate\", options))));\n  data.buffer.push(\"\\n        </div>\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"shouldConfirmDelete\", {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_editHeading\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  data.buffer.push(\"<div class=\\\"list-heading\\\">\\n    <h4 class=\\\"list-heading__title\\\" data-qa-label=\\\"heading\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.heading\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n</div>\\n<div class=\\\"panel__body\\\">\\n    <div class=\\\"form__group mar--sm--bn\\\">\\n    \t\");\n  hashContexts = {'class': depth0,'type': depth0,'placeholder': depth0,'value': depth0,'maxlength': depth0,'data-qa-input': depth0};\n  hashTypes = {'class': \"STRING\",'type': \"STRING\",'placeholder': \"ID\",'value': \"ID\",'maxlength': \"STRING\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'class': (\"elementInput\"),\n    'type': (\"text\"),\n    'placeholder': (\"labels.typeYourHeadingHere\"),\n    'value': (\"model.Text__c\"),\n    'maxlength': (\"1000\"),\n    'data-qa-input': (\"heading\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_editParagraph\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  data.buffer.push(\"<div class=\\\"list-heading\\\">\\n    <h4 class=\\\"list-heading__title\\\" data-qa-label=\\\"questionText\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.questionText\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n</div>\\n<div class=\\\"panel__body\\\">\\n    <div class=\\\"form__group mar--sm--bn\\\">\\n        \");\n  hashContexts = {'class': depth0,'placeholder': depth0,'value': depth0,'maxlength': depth0,'data-qa-input': depth0};\n  hashTypes = {'class': \"STRING\",'placeholder': \"ID\",'value': \"ID\",'maxlength': \"STRING\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'class': (\"elementInput\"),\n    'placeholder': (\"labels.typeYourQuestionHere\"),\n    'value': (\"model.Text__c\"),\n    'maxlength': (\"1000\"),\n    'data-qa-input': (\"questionText\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.textarea || (depth0 && depth0.textarea)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_editRadioButtons\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashTypes, hashContexts, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"answerInput\", options) : helperMissing.call(depth0, \"partial\", \"answerInput\", options))));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n    <div class=\\\"panel__component\\\">\\n        <button type=\\\"button\\\" class=\\\"button button--primary button--ghost\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickAddAnswer\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"addAnswerChoice\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.addAnswerChoice\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</button>\\n    </div>\\n\");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"list-heading\\\">\\n    <h4 class=\\\"list-heading__title\\\" data-qa-label=\\\"questionText\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.questionText\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n</div>\\n<div class=\\\"panel__body\\\">\\n    <div class=\\\"form__group mar--sm--bn\\\">\\n        \");\n  hashContexts = {'class': depth0,'placeholder': depth0,'value': depth0,'maxlength': depth0,'data-qa-input': depth0};\n  hashTypes = {'class': \"STRING\",'placeholder': \"ID\",'value': \"ID\",'maxlength': \"STRING\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'class': (\"elementInput\"),\n    'placeholder': (\"labels.typeYourQuestionHere\"),\n    'value': (\"model.Text__c\"),\n    'maxlength': (\"1000\"),\n    'data-qa-input': (\"questionText\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.textarea || (depth0 && depth0.textarea)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n  data.buffer.push(\"\\n    </div>\\n</div>\\n<div class=\\\"list-heading\\\">\\n    <h4 class=\\\"list-heading__title\\\" data-qa-label=\\\"answerChoice\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.answerChoices\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n</div>\\n\");\n  hashContexts = {'itemController': depth0};\n  hashTypes = {'itemController': \"STRING\"};\n  stack2 = helpers.each.call(depth0, \"answers\", {hash:{\n    'itemController': (\"answer\")\n  },inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers.unless.call(depth0, \"isAtMaxAnswers\", {hash:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_editRichText\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  data.buffer.push(\"<div class=\\\"list-heading\\\">\\n    <h4 class=\\\"list-heading__title\\\" data-qa-label=\\\"richText\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.richText\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n</div>\\n<div class=\\\"panel__body\\\">\\n    <div \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":form__group :mar--sm--bn errorMessage:has-error\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\">\\n        \");\n  hashContexts = {'class': depth0,'componentId': depth0,'value': depth0,'bindingType': depth0,'autofocus': depth0};\n  hashTypes = {'class': \"STRING\",'componentId': \"ID\",'value': \"ID\",'bindingType': \"STRING\",'autofocus': \"BOOLEAN\"};\n  options = {hash:{\n    'class': (\"elementInput\"),\n    'componentId': (\"componentId\"),\n    'value': (\"model.Rich_Text_Content__c\"),\n    'bindingType': (\"text\"),\n    'autofocus': (true)\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['rich-text'] || (depth0 && depth0['rich-text'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"rich-text\", options))));\n  data.buffer.push(\"\\n        <small class=\\\"input-error-content\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"errorMessage\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</small>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_editTextField\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  data.buffer.push(\"<div class=\\\"list-heading\\\">\\n    <h4 class=\\\"list-heading__title\\\" data-qa-label=\\\"questionText\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.questionText\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h4>\\n</div>\\n<div class=\\\"panel__body\\\">\\n    <div class=\\\"form__group mar--sm--bn\\\">\\n        \");\n  hashContexts = {'class': depth0,'placeholder': depth0,'value': depth0,'maxlength': depth0,'data-qa-input': depth0};\n  hashTypes = {'class': \"STRING\",'placeholder': \"ID\",'value': \"ID\",'maxlength': \"STRING\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'class': (\"elementInput\"),\n    'placeholder': (\"labels.typeYourQuestionHere\"),\n    'value': (\"model.Text__c\"),\n    'maxlength': (\"1000\"),\n    'data-qa-input': (\"questionText\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.textarea || (depth0 && depth0.textarea)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"textarea\", options))));\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_newFormElement\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<div \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":building-block :is-empty :has-hidden-items :createBlock isInEditMode:edit-active\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickNew\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"plus\\\">\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_previewCheckboxes\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n        <div class=\\\"form__group mar--sm--tm\\\">\\n            <input type=\\\"checkbox\\\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"STRING\"};\n  options = {hash:{\n    'disabled': (\"isInEditMode\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\"/><label> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"answer.Value__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n        </div>\\n    \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<p class=\\\"break-word\\\" data-qa-label=\\\"question\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n</p>\\n<div class=\\\"form__group\\\" data-qa-checkbox=\\\"checkbox\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"answer\", \"in\", \"answers\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_previewDate\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<p class=\\\"break-word\\\" data-qa-label=\\\"question\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n</p>\\n<div class=\\\"form__group mar--sm--tm\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"date-picker\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n    \\n    <small class=\\\"input-error-content\\\"></small>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_previewFormElement\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<div \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\"isPreview::building-block :has-hidden-items isInEditMode:edit-active\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashContexts = {'id': depth0};\n  hashTypes = {'id': \"ID\"};\n  options = {hash:{\n    'id': (\"divId\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\">\\n    <div class=\\\"building-block__done\\\">\\n        <ul class=\\\"list-style-type-none inline-block mar--sm--n text-right float--right hidden-item\\\">\\n            <li title=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"labels.edit\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" class=\\\"inline-block relative editBlock\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickEdit\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-toggle=\\\"tooltip\\\" data-placement=\\\"left\\\" data-qa-icon=\\\"pencil\\\">\\n                <span class=\\\"juicon juicon-pencil component__icon text-faded pad--sm--ls\\\"></span>\\n            </li>\\n            <li title=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"labels.moveUp\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" class=\\\"inline-block relative\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickMoveUp\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-toggle=\\\"tooltip\\\" data-placement=\\\"left\\\" data-qa-icon=\\\"moveUp\\\">\\n                <span class=\\\"juicon juicon-upward component__icon text-faded pad--sm--ls\\\"></span>\\n            </li>\\n            <li title=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"labels.moveDown\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" class=\\\"inline-block relative\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickMoveDown\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-toggle=\\\"tooltip\\\" data-placement=\\\"left\\\" data-qa-icon=\\\"moveDown\\\">\\n                <span class=\\\"juicon juicon-downward component__icon text-faded pad--sm--ls\\\"></span>\\n            </li>\\n        </ul>\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"previewTemplate\", options) : helperMissing.call(depth0, \"partial\", \"previewTemplate\", options))));\n  data.buffer.push(\"\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_previewHeading\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<h1 class=\\\"break-word\\\" data-qa-text=\\\"heading\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n</h1>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_previewParagraph\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<p class=\\\"break-word\\\" data-qa-label=\\\"question\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n</p>\\n<div class=\\\"form__group mar--sm--tm\\\">\\n    <label class='sr-only'>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.answer\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n    <textarea placeholder=\\\"Type an answer\\\" data-qa-input=\\\"answer\\\"></textarea>\\n    <small class=\\\"input-error-content\\\"></small>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_previewRadioButtons\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n            <li class=\\\"form__group mar--sm--tm\\\">\\n                <label><span class=\\\"part__left--fixed pad--sm--rn\\\"><input type=\\\"radio\\\" name=\\\"answers\\\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"STRING\"};\n  options = {hash:{\n    'disabled': (\"isInEditMode\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\"></span><span class=\\\"part__body\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"answer.Value__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span></label>\\n            </li>\\n        \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<p class=\\\"mar--sm--bm break-word\\\" data-qa-label=\\\"question\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n</p>\\n<form role=\\\"form\\\" class=\\\"form\\\">\\n    <ul class=\\\"form__group list-style-type-none\\\" data-qa-checkbox=\\\"radioButtons\\\">\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"answer\", \"in\", \"answers\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n    </ul>\\n        \\n    <small class=\\\"input-error-content\\\"></small>\\n</form>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_previewRichText\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', hashContexts, hashTypes, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<div data-qa-text=\\\"richText\\\">\");\n  hashContexts = {'unescaped': depth0};\n  hashTypes = {'unescaped': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model.Rich_Text_Content__c\", {hash:{\n    'unescaped': (\"true\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_previewTextField\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', hashTypes, hashContexts, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<p class=\\\"break-word\\\" data-qa-label=\\\"question\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"model.Text__c\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n</p>\\n<div class=\\\"form__group mar--sm--tm\\\">\\n    <label class='sr-only'>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.answer\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n    <input type=\\\"text\\\" placeholder=\\\"\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.unbound.call(depth0, \"labels.typeAnAnswer\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\\" data-qa-input=\\\"answer\\\"/>\\n    <small class=\\\"input-error-content\\\"></small>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"_savingNotification\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<div \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":snack-bar__container showSavingNotification::hide :saveWorkAlert\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" data-qa-banner=\\\"saving\\\">\\n    <div class=\\\"snack-bar\\\">\\n        <span class=\\\"saveText\\\"><span class=\\\"juicon juicon-loading spin-it\\\"></span> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.saving\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"components/datepicker\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '';\n\n\n  data.buffer.push(\"<div class=\\\"row input__group\\\">\\n    <div class=\\\"column--md--4\\\">\\n        <input type=\\\"text\\\" readonly=true/>\\n        \\n    </div>\\n    <div class=\\\"column--md--2\\\">\\n        <button type=\\\"button\\\" class=\\\"button button--secondary datepicker\\\" data-date-format=\\\"\\\" data-date=\\\"\\\">\\n            <span class=\\\"juicon juicon-calendar\\\"></span>\\n        </button>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"contactInfo\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n        <div class=\\\"column--md--6\\\" data-qa-container=\\\"nameField\\\">\\n            <label class=\\\"table-group mar--sm--bs\\\">\\n                <span class=\\\"table-group__object--large\\\" data-qa-label=\\\"nameField\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"nameField.label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n                <span class=\\\"table-group__object--small\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"nameField.isRequired\", {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                </span>\\n            </label>\\n        </div>\\n    \");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  data.buffer.push(\"\\n                        <input type=\\\"checkbox\\\" checked=true disabled data-qa-input=\\\"required\\\"/>\\n                    \");\n  }\n\nfunction program4(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"nameField.isEnabled\"),\n    'data-qa-input': (\"required\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n        <div class=\\\"column--md--6\\\" data-qa-container=\\\"contactField\\\">\\n            <label class=\\\"table-group mar--sm--bs\\\">\\n                <span class=\\\"table-group__object--large\\\" data-qa-label=\\\"contactField\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"contactField.label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n                <span class=\\\"table-group__object--small\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"contactField.isRequired\", {hash:{},inverse:self.program(7, program7, data),fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                </span>\\n            </label>\\n        </div>\\n    \");\n  return buffer;\n  }\nfunction program7(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"contactField.isEnabled\"),\n    'data-qa-input': (\"required\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\n\nfunction program9(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n        <div class=\\\"column--md--6\\\" data-qa-container=\\\"addressField\\\">\\n            <label class=\\\"table-group mar--sm--bs\\\">\\n                <span class=\\\"table-group__object--large\\\" data-qa-label=\\\"addressField\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"addressField.label\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n                <span class=\\\"table-group__object--small\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"addressField.isRequired\", {hash:{},inverse:self.program(10, program10, data),fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                </span>\\n            </label>\\n        </div>\\n    \");\n  return buffer;\n  }\nfunction program10(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"addressField.isEnabled\"),\n    'data-qa-input': (\"required\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<!--Name stuff-->\\n<div class=\\\"row\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"nameField\", \"in\", \"name\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n</div>\\n<hr class=\\\"hr-alt\\\">\\n<!--Communication stuff-->\\n<div class=\\\"row\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"contactField\", \"in\", \"contact\", {hash:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n</div>\\n<hr class=\\\"hr-alt\\\">\\n<!--Address stuff-->\\n<div class=\\\"row\\\">\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"addressField\", \"in\", \"address\", {hash:{},inverse:self.noop,fn:self.program(9, program9, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"educationHistory\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<label class=\\\"table-group mar--sm--bs\\\">\\n    <span class=\\\"table-group__object--small\\\">\\n        \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"isEnabled\"),\n    'data-qa-input': (\"enabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n    </span>\\n    <span class=\\\"table-group__object--large\\\" data-qa-label=\\\"enabled\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.enabled\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n</label>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"employmentHistory\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', hashContexts, hashTypes;\n  data.buffer.push(\"\\n    <div class=\\\"form__group pad--sm--lxl\\\" id=\\\"empHistoryDrop\\\">\\n        <div class=\\\"select__wrap inline-block \\\">\\n            <div class=\\\"input__icon juicon juicon-down\\\"></div>\\n            \");\n  hashContexts = {'content': depth0,'value': depth0,'data-qa-input': depth0};\n  hashTypes = {'content': \"ID\",'value': \"ID\",'data-qa-input': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"select\", {hash:{\n    'content': (\"employmentHistoryYears\"),\n    'value': (\"selectedEmploymentHistoryYears\"),\n    'data-qa-input': (\"employmentHistoryYears\")\n  },contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n        </div>\\n        <label class=\\\"pad--sm--ls\\\" data-qa-label=\\\"employmentHistoryYears\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.yearsOfHistoryRequired\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n    </div>\\n\");\n  return buffer;\n  }\n\n  data.buffer.push(\"<label class=\\\"table-group mar--sm--bs\\\">\\n    <span class=\\\"table-group__object--small\\\">\\n        \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"isEnabled\"),\n    'data-qa-input': (\"enabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n    </span>\\n    <span class=\\\"table-group__object--large\\\" data-qa-label=\\\"enabled\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.enabled\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n</label>\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isEnabled\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"formBuilder\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                <div class=\\\"button-group float--right mar--sm--only--rs mar--md--lxs\\\">\\n                    <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary disableSave:disabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"ID\"};\n  options = {hash:{\n    'disabled': (\"disableSave\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickSaveAndClose\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"saveAndClose\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.save\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" <span class=\\\"show-brkpoint--md\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.andClose\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span></button>\\n                    <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary :button--split :show-brkpoint--md disableSave:disabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" data-toggle=\\\"dropdown\\\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"ID\"};\n  options = {hash:{\n    'disabled': (\"disableSave\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\"><span class=\\\"caret\\\"></span></button>\\n                    <ul class=\\\"dropdown-menu dropdown-menu--right\\\">\\n                        <li class=\\\"dropdown-menu__list-item\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickSaveAndKeepWorking\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"saveAndWork\\\"><a>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.saveAndKeepWorking\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a></li>\\n                    </ul>\\n                </div>\\n                <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":float--right-left :button :button--secondary :mar--sm--only--ls disableCancel:disabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"ID\"};\n  options = {hash:{\n    'disabled': (\"disableCancel\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickCancel\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"cancel\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.cancel\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</button>\\n                <h1 class=\\\"nav-bar--sf1__title has-subtitle has-subheading page__heading\\\" data-qa-label=\\\"title\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.formBuilder\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h1>\\n                <h2 class=\\\"nav-bar--sf1__subtitle page__subheading\\\" data-qa-label=\\\"subtitle\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"jobTitle\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h2>\\n            \");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":float--right :button :button--primary :mar--sm--only--ls :mar--md--lxs disableSave:disabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"ID\"};\n  options = {hash:{\n    'disabled': (\"disableSave\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickSaveAndKeepWorking\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"save\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.save\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</button>\\n                <h1 class=\\\"nav-bar--sf1__title page__heading\\\" data-qa-label=\\\"title\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.formBuilder\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</h1>\\n            \");\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = '', hashContexts, hashTypes;\n  data.buffer.push(\"\\n            <div class=\\\"alert alert--error\\\">\\n                \");\n  hashContexts = {'unescaped': depth0};\n  hashTypes = {'unescaped': \"STRING\"};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"errorMessage\", {hash:{\n    'unescaped': (\"true\")\n  },contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n            </div>\\n        \");\n  return buffer;\n  }\n\nfunction program7(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.render || (depth0 && depth0.render)),stack1 ? stack1.call(depth0, \"formElements\", \"sectionFormElements\", options) : helperMissing.call(depth0, \"render\", \"formElements\", \"sectionFormElements\", options))));\n  data.buffer.push(\"\\n        \");\n  return buffer;\n  }\n\nfunction program9(depth0,data) {\n  \n  var buffer = '', stack1, stack2, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n            <div class=\\\"row\\\">\\n                <div class=\\\"column--md--3\\\">\\n                    <ul id=\\\"contentNav\\\" class=\\\"list-group list-group--bordered mar--sm--tn\\\">\\n                        \");\n  hashContexts = {'class': depth0,'tagName': depth0,'disabledWhen': depth0,'data-qa-link': depth0};\n  hashTypes = {'class': \"STRING\",'tagName': \"STRING\",'disabledWhen': \"ID\",'data-qa-link': \"STRING\"};\n  options = {hash:{\n    'class': (\"list-group__item\"),\n    'tagName': (\"li\"),\n    'disabledWhen': (\"disableCancel\"),\n    'data-qa-link': (\"contactInfo\")\n  },inverse:self.noop,fn:self.program(10, program10, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"contactInfo\", \"selectedHiringModel\", options) : helperMissing.call(depth0, \"link-to\", \"contactInfo\", \"selectedHiringModel\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'class': depth0,'tagName': depth0,'disabledWhen': depth0,'data-qa-link': depth0};\n  hashTypes = {'class': \"STRING\",'tagName': \"STRING\",'disabledWhen': \"ID\",'data-qa-link': \"STRING\"};\n  options = {hash:{\n    'class': (\"list-group__item\"),\n    'tagName': (\"li\"),\n    'disabledWhen': (\"disableCancel\"),\n    'data-qa-link': (\"resume\")\n  },inverse:self.noop,fn:self.program(12, program12, data),contexts:[depth0,depth0,depth0],types:[\"STRING\",\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"applicationSection\", \"resume\", \"selectedHiringModel\", options) : helperMissing.call(depth0, \"link-to\", \"applicationSection\", \"resume\", \"selectedHiringModel\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'class': depth0,'tagName': depth0,'disabledWhen': depth0,'data-qa-link': depth0};\n  hashTypes = {'class': \"STRING\",'tagName': \"STRING\",'disabledWhen': \"ID\",'data-qa-link': \"STRING\"};\n  options = {hash:{\n    'class': (\"list-group__item\"),\n    'tagName': (\"li\"),\n    'disabledWhen': (\"disableCancel\"),\n    'data-qa-link': (\"skills\")\n  },inverse:self.noop,fn:self.program(14, program14, data),contexts:[depth0,depth0,depth0],types:[\"STRING\",\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"applicationSection\", \"skills\", \"selectedHiringModel\", options) : helperMissing.call(depth0, \"link-to\", \"applicationSection\", \"skills\", \"selectedHiringModel\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'class': depth0,'tagName': depth0,'disabledWhen': depth0,'data-qa-link': depth0};\n  hashTypes = {'class': \"STRING\",'tagName': \"STRING\",'disabledWhen': \"ID\",'data-qa-link': \"STRING\"};\n  options = {hash:{\n    'class': (\"list-group__item\"),\n    'tagName': (\"li\"),\n    'disabledWhen': (\"disableCancel\"),\n    'data-qa-link': (\"employmentHistory\")\n  },inverse:self.noop,fn:self.program(16, program16, data),contexts:[depth0,depth0,depth0],types:[\"STRING\",\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"applicationSection\", \"employmentHistory\", \"selectedHiringModel\", options) : helperMissing.call(depth0, \"link-to\", \"applicationSection\", \"employmentHistory\", \"selectedHiringModel\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\" \\n                        \");\n  hashContexts = {'class': depth0,'tagName': depth0,'disabledWhen': depth0,'data-qa-link': depth0};\n  hashTypes = {'class': \"STRING\",'tagName': \"STRING\",'disabledWhen': \"ID\",'data-qa-link': \"STRING\"};\n  options = {hash:{\n    'class': (\"list-group__item\"),\n    'tagName': (\"li\"),\n    'disabledWhen': (\"disableCancel\"),\n    'data-qa-link': (\"educationHistory\")\n  },inverse:self.noop,fn:self.program(18, program18, data),contexts:[depth0,depth0,depth0],types:[\"STRING\",\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"applicationSection\", \"educationHistory\", \"selectedHiringModel\", options) : helperMissing.call(depth0, \"link-to\", \"applicationSection\", \"educationHistory\", \"selectedHiringModel\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\" \\n                        \");\n  hashContexts = {'class': depth0,'tagName': depth0,'disabledWhen': depth0,'data-qa-link': depth0};\n  hashTypes = {'class': \"STRING\",'tagName': \"STRING\",'disabledWhen': \"ID\",'data-qa-link': \"STRING\"};\n  options = {hash:{\n    'class': (\"list-group__item\"),\n    'tagName': (\"li\"),\n    'disabledWhen': (\"disableCancel\"),\n    'data-qa-link': (\"general\")\n  },inverse:self.noop,fn:self.program(20, program20, data),contexts:[depth0,depth0,depth0],types:[\"STRING\",\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"formElements\", \"General\", \"selectedHiringModel\", options) : helperMissing.call(depth0, \"link-to\", \"formElements\", \"General\", \"selectedHiringModel\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'class': depth0,'tagName': depth0,'disabledWhen': depth0,'data-qa-link': depth0};\n  hashTypes = {'class': \"STRING\",'tagName': \"STRING\",'disabledWhen': \"ID\",'data-qa-link': \"STRING\"};\n  options = {hash:{\n    'class': (\"list-group__item\"),\n    'tagName': (\"li\"),\n    'disabledWhen': (\"disableCancel\"),\n    'data-qa-link': (\"legal\")\n  },inverse:self.noop,fn:self.program(22, program22, data),contexts:[depth0,depth0,depth0],types:[\"STRING\",\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"formElements\", \"Legal\", \"selectedGeography\", options) : helperMissing.call(depth0, \"link-to\", \"formElements\", \"Legal\", \"selectedGeography\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                        \");\n  hashContexts = {'class': depth0,'tagName': depth0,'disabledWhen': depth0,'data-qa-link': depth0};\n  hashTypes = {'class': \"STRING\",'tagName': \"STRING\",'disabledWhen': \"ID\",'data-qa-link': \"STRING\"};\n  options = {hash:{\n    'class': (\"list-group__item\"),\n    'tagName': (\"li\"),\n    'disabledWhen': (\"disableCancel\"),\n    'data-qa-link': (\"onePage\")\n  },inverse:self.noop,fn:self.program(24, program24, data),contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  stack2 = ((stack1 = helpers['link-to'] || (depth0 && depth0['link-to'])),stack1 ? stack1.call(depth0, \"onePage\", options) : helperMissing.call(depth0, \"link-to\", \"onePage\", options));\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    </ul>\\n                </div>\\n                <div class=\\\"column--md--9 pad--md--lxl\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers.unless.call(depth0, \"isInOnePage\", {hash:{},inverse:self.noop,fn:self.program(26, program26, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n                    <hr class=\\\"hr-alt\\\">\\n                    \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"outlet\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                </div>\\n            </div>\\n        \");\n  return buffer;\n  }\nfunction program10(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <a>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.contactInfo\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a>\\n                        \");\n  return buffer;\n  }\n\nfunction program12(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <a>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.resume\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a>\\n                        \");\n  return buffer;\n  }\n\nfunction program14(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <a>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.skills\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a>\\n                        \");\n  return buffer;\n  }\n\nfunction program16(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <a>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.employmentHistory\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a>\\n                        \");\n  return buffer;\n  }\n\nfunction program18(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <a>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.educationHistory\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a>\\n                        \");\n  return buffer;\n  }\n\nfunction program20(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <a>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.general\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a>\\n                        \");\n  return buffer;\n  }\n\nfunction program22(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <a>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.legal\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a>\\n                        \");\n  return buffer;\n  }\n\nfunction program24(depth0,data) {\n  \n  \n  data.buffer.push(\"\\n                            <a>Single Page</a>\\n                        \");\n  }\n\nfunction program26(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n                        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"isInLegal\", {hash:{},inverse:self.program(29, program29, data),fn:self.program(27, program27, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n                    \");\n  return buffer;\n  }\nfunction program27(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <label class=\\\"mar--sm--rs\\\" data-qa-label=\\\"geography\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.geography\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n                            <span class=\\\"select__wrap inline-block\\\">\\n                                <span class=\\\"input__icon juicon juicon-down\\\"></span>\\n                                \");\n  hashContexts = {'content': depth0,'optionValuePath': depth0,'optionLabelPath': depth0,'value': depth0,'data-qa-input': depth0,'disabled': depth0};\n  hashTypes = {'content': \"ID\",'optionValuePath': \"STRING\",'optionLabelPath': \"STRING\",'value': \"ID\",'data-qa-input': \"STRING\",'disabled': \"ID\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"select\", {hash:{\n    'content': (\"geographies\"),\n    'optionValuePath': (\"content.Id\"),\n    'optionLabelPath': (\"content.Name\"),\n    'value': (\"selectedGeography\"),\n    'data-qa-input': (\"geography\"),\n    'disabled': (\"disableCancel\")\n  },contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </span>\\n                        \");\n  return buffer;\n  }\n\nfunction program29(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n                            <label class=\\\"mar--sm--rs\\\" data-qa-label=\\\"hiringModel\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.hiringModel\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</label>\\n                            <span class=\\\"select__wrap inline-block\\\">\\n                                <span class=\\\"input__icon juicon juicon-down\\\"></span>\\n                                \");\n  hashContexts = {'content': depth0,'value': depth0,'data-qa-input': depth0,'disabled': depth0};\n  hashTypes = {'content': \"ID\",'value': \"ID\",'data-qa-input': \"STRING\",'disabled': \"ID\"};\n  data.buffer.push(escapeExpression(helpers.view.call(depth0, \"select\", {hash:{\n    'content': (\"hiringModelPicklistValues\"),\n    'value': (\"selectedHiringModel\"),\n    'data-qa-input': (\"hiringModel\"),\n    'disabled': (\"disableCancel\")\n  },contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n                            </span>\\n                        \");\n  return buffer;\n  }\n\nfunction program31(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                <div class=\\\"button-group float--right mar--sm--only--rs mar--md--lxs\\\">\\n                    <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary disableSave:disabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"ID\"};\n  options = {hash:{\n    'disabled': (\"disableSave\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickSaveAndClose\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"saveAndClose\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.save\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" <span class=\\\"show-brkpoint--md\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.andClose\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span></button>\\n                    <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":button :button--primary :button--split :show-brkpoint--md disableSave:disabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" data-toggle=\\\"dropdown\\\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"ID\"};\n  options = {hash:{\n    'disabled': (\"disableSave\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\"><span class=\\\"caret\\\"></span></button>\\n                    <ul class=\\\"dropdown-menu dropdown-menu--right\\\">\\n                        <li class=\\\"dropdown-menu__list-item\\\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickSaveAndKeepWorking\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"saveAndWork\\\"><a>\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.saveAndKeepWorking\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</a></li>\\n                    </ul>\\n                </div>\\n                <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":float--right-left :button :button--secondary :mar--sm--only--ls disableCancel:disabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"ID\"};\n  options = {hash:{\n    'disabled': (\"disableCancel\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickCancel\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.cancel\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</button>\\n            \");\n  return buffer;\n  }\n\nfunction program33(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n                <button \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":float--right :button :button--primary :mar--sm--only--ls :mar--md--lxs disableSave:disabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashContexts = {'disabled': depth0};\n  hashTypes = {'disabled': \"ID\"};\n  options = {hash:{\n    'disabled': (\"disableSave\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\" \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers.action.call(depth0, \"clickSaveAndKeepWorking\", {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" data-qa-button=\\\"save\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.save\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</button>\\n            \");\n  return buffer;\n  }\n\n  data.buffer.push(\"<div class=\\\"scope-container\\\">\\n    <div \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\":content :pad--md--tm isOnJobSpecific:pad--md--bl:pad--md--bn :pad--sm--only--n :pad--sm--tm\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\">\\n        <nav id=\\\"formBuildNav\\\" class=\\\"nav-bar--sf1 mar--sm--bn\\\">\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isOnJobSpecific\", {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n        </nav>\\n        <hr class=\\\"show-brkpoint--md\\\"/>\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"errorMessage\", {hash:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n    </div>\\n\\n    <div \");\n  hashContexts = {'class': depth0};\n  hashTypes = {'class': \"STRING\"};\n  options = {hash:{\n    'class': (\"isOnJobSpecific:content--readable:content :pad--sm--tm :pad--sm--only--lxl :content--gutter--right\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers['bind-attr'] || (depth0 && depth0['bind-attr'])),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"bind-attr\", options))));\n  data.buffer.push(\">\\n\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"savingNotification\", options) : helperMissing.call(depth0, \"partial\", \"savingNotification\", options))));\n  data.buffer.push(\"\\n\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isOnJobSpecific\", {hash:{},inverse:self.program(9, program9, data),fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n    </div>\\n    \\n    <div class=\\\"content pad--md--tm pad--md--bl pad--sm--only--n pad--sm--tm\\\">\\n        <nav id=\\\"formBuildNav\\\" class=\\\"nav-bar--sf1 mar--sm--bn\\\">\\n            \");\n  hashTypes = {};\n  hashContexts = {};\n  stack2 = helpers['if'].call(depth0, \"isOnJobSpecific\", {hash:{},inverse:self.program(33, program33, data),fn:self.program(31, program31, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack2 || stack2 === 0) { data.buffer.push(stack2); }\n  data.buffer.push(\"\\n        </nav>\\n    </div>\\n</div>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"formElement\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"newFormElement\", options) : helperMissing.call(depth0, \"partial\", \"newFormElement\", options))));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n \t\");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"editFormElement\", options) : helperMissing.call(depth0, \"partial\", \"editFormElement\", options))));\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n\t\");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"isLast\", {hash:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\nfunction program6(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n    \t\");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0],types:[\"STRING\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.partial || (depth0 && depth0.partial)),stack1 ? stack1.call(depth0, \"previewFormElement\", options) : helperMissing.call(depth0, \"partial\", \"previewFormElement\", options))));\n  data.buffer.push(\"\\n    \");\n  return buffer;\n  }\n\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"isAtMaxElements\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"isEditing\", {hash:{},inverse:self.program(5, program5, data),fn:self.program(3, program3, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"formElements\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"formElement\", \"in\", \"arrangedContent\", {hash:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts, options;\n  data.buffer.push(\"\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  options = {hash:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.render || (depth0 && depth0.render)),stack1 ? stack1.call(depth0, \"formElement\", \"formElement\", options) : helperMissing.call(depth0, \"render\", \"formElement\", \"formElement\", options))));\n  data.buffer.push(\"\\n    \");\n  return buffer;\n  }\n\nfunction program4(depth0,data) {\n  \n  var buffer = '', stack1, hashTypes, hashContexts;\n  data.buffer.push(\"\\n    \");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"formElement\", \"in\", \"formElementsToDisplay\", {hash:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\");\n  return buffer;\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = '', hashTypes, hashContexts;\n  data.buffer.push(\"\\n    <p class=\\\"text-faded text-center mar--sm--txxl mar--sm--bxxl\\\">\\n        \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.useThe\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" <span class=\\\"label label--secondary label--round\\\"><span class=\\\"juicon juicon-plus text-faded\\\"></span></span> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.buttonsToThe\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\" <span class=\\\"show-brkpoint--md\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.left\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span><span class=\\\"show-brkpoint--sm--only\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.right\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span> \");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.toAddQuestionsOrContent\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"\\n    </p>\\n\");\n  return buffer;\n  }\n\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers['if'].call(depth0, \"isOnJobSpecific\", {hash:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  data.buffer.push(\"\\n\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.unless.call(depth0, \"hasFormElements\", {hash:{},inverse:self.noop,fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"onePage\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashTypes, hashContexts, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = '', stack1, hashContexts, hashTypes, options;\n  data.buffer.push(\"\\n    <label class=\\\"table-group mar--sm--bs\\\"><span class=\\\"table-group__object--small\\\">\");\n  hashContexts = {'type': depth0,'checked': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"hm.isOnePage\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"</span><span class=\\\"table-group__object--large\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"hm.name\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span></label>\\n\");\n  return buffer;\n  }\n\n  data.buffer.push(\"<p>\\n    Which hiring models will be rendered on a single page?\\n</p>\\n\\n\");\n  hashTypes = {};\n  hashContexts = {};\n  stack1 = helpers.each.call(depth0, \"hm\", \"in\", \"hiringModels\", {hash:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data});\n  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"resume\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<label class=\\\"table-group mar--sm--bs\\\">\\n    <span class=\\\"table-group__object--small\\\">\\n        \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"isEnabled\"),\n    'data-qa-input': (\"enabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n    </span>\\n    <span class=\\\"table-group__object--large\\\" data-qa-label=\\\"enabled\\\">Resume</span>\\n</label>\\n\\n<label class=\\\"table-group mar--sm--bs\\\">\\n\t<span class=\\\"table-group__object--small\\\">\\n\t\t\");\n  hashContexts = {'type': depth0,'checked': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"personalStatement\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n\t</span>\\n\t<span class=\\\"table-group__object--large\\\">Personal Statement</span>\\n</label>\");\n  return buffer;\n  \n});\n\nEmber.TEMPLATES[\"skills\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\nthis.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n  var buffer = '', stack1, hashContexts, hashTypes, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  data.buffer.push(\"<label class=\\\"table-group mar--sm--bs\\\">\\n    <span class=\\\"table-group__object--small\\\">\\n        \");\n  hashContexts = {'type': depth0,'checked': depth0,'data-qa-input': depth0};\n  hashTypes = {'type': \"STRING\",'checked': \"ID\",'data-qa-input': \"STRING\"};\n  options = {hash:{\n    'type': (\"checkbox\"),\n    'checked': (\"isEnabled\"),\n    'data-qa-input': (\"enabled\")\n  },contexts:[],types:[],hashContexts:hashContexts,hashTypes:hashTypes,data:data};\n  data.buffer.push(escapeExpression(((stack1 = helpers.input || (depth0 && depth0.input)),stack1 ? stack1.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n  data.buffer.push(\"\\n    </span>\\n    <span class=\\\"table-group__object--large\\\" data-qa-label=\\\"enabled\\\">\");\n  hashTypes = {};\n  hashContexts = {};\n  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, \"labels.enabled\", {hash:{},contexts:[depth0],types:[\"ID\"],hashContexts:hashContexts,hashTypes:hashTypes,data:data})));\n  data.buffer.push(\"</span>\\n</label>\");\n  return buffer;\n  \n});\n\n})();//@ sourceURL=app/templates.js")

eval("(function() {\n\n// For storing external IDs\nEID = 0;\n\n// Kick off Ember\nApp = Ember.Application.create({\n    rootElement: '#application'\n});\n\nApp.FormBuilderView = Ember.View.extend({\n    afterRenderEvent: function() {\n        $('body').tooltip({\n            selector: '[data-toggle=tooltip]'\n        });\n    }\n});\n\nApp.Fixtures = Ember.Object.create({\n    currentSection: null,\n    currentHiringModel: null\n});\n\n\n// Routes\nApp.FormBuilderRoute = Ember.Route.extend( {\n    model: function(params) {\n        //var formElements = [];\n        var general = [];\n        var legal = [];\n\n        // A dummy form element is used to allow adding form elements at the beginning or end.\n        var generalDummyFormElement = Ember.Object.create({\n            eId: EID++,\n            Sequence_Number__c: 1,\n            isNew: false,\n            isEditing: false,\n            isLast: true\n        });\n\n        var legalDummyFormElement = Ember.Object.create({\n            eId: EID++,\n            Sequence_Number__c: 1,\n            isNew: false,\n            isEditing: false,\n            isLast: true\n        });\n\n        // Iterate through passed in list of form elements and create form element objects.\n        parsedFormElementsMap.generalLegalFormElements.forEach(function(fe) {\n            var newFe = Ember.Object.create(fe).getProperties('Id','Text__c','Element_Type__c','Answer_Type__c', 'Geography__c',\n                                                                'Sequence_Number__c', 'Rich_Text_Content__c', 'Hiring_Model__c', \n                                                                'Section__c');\n            newFe.eId = EID++;\n            newFe.answers = [];\n\n            if ((fe.Answer_Type__c === 'Radio Buttons' || fe.Answer_Type__c === 'Checkboxes') \n                    && fe.Answer_Choices__r && !Ember.isEmpty(fe.Answer_Choices__r.records)) {\n                fe.Answer_Choices__r.records.forEach(function(ac) {\n                    var newAc = ac;\n\n                    newAc.eId = EID++;\n                    newAc.formElementEId = newFe.eId;\n\n                    newFe.answers.addObject(Ember.Object.create(newAc));\n                });\n            } else {\n                newFe.answers.addObject(Ember.Object.create({\n                    eId: EID++,\n                    formElementEId: newFe.eId,\n                    Value__c: null,\n                    Score__c: 0,\n                    Disqualify__c: false\n                }));\n            }\n\n            if (newFe.Section__c === 'General') {\n                generalDummyFormElement.incrementProperty('Sequence_Number__c');\n                general.addObject(Ember.Object.create(newFe));\n            } else {\n                legalDummyFormElement.incrementProperty('Sequence_Number__c');\n                legal.addObject(Ember.Object.create(newFe));\n            }\n\n            //formElements.addObject(Ember.Object.create(newFe));\n        });\n    \n        //formElements.addObject(dummyFormElement);\n        legal.addObject(legalDummyFormElement);\n        general.addObject(generalDummyFormElement);\n\n        var contactInfoFields = {\n            name: parsedFormElementsMap.name,\n            contact: parsedFormElementsMap.contact,\n            address: parsedFormElementsMap.address\n        };\n\n        var hiringModelData = {};\n\n        var hiringModelPicklistValues = parsedFormElementsMap.hiringModelPicklistValues.getEach('value');\n\n        hiringModelPicklistValues.forEach(function(hm) {\n            var hiringModel = parsedFormElementsMap.allModels.findBy('Name', hm);\n\n            if (!Ember.isNone(hiringModel)) {\n\n                var configObj = JSON.parse(hiringModel.Configuration_Json__c);\n\n                // Clean up contact info hiring model object in case user has removed a field from the set.\n                Object.keys(configObj.contactInfo).forEach(function(key) {\n                    if (Ember.isNone(contactInfoFields.name.findBy('name', key))\n                            && Ember.isNone(contactInfoFields.contact.findBy('name', key))\n                            && Ember.isNone(contactInfoFields.address.findBy('name', key))) {\n                        delete configObj.contactInfo[key];\n                    }\n                });\n\n                hiringModelData[hm] = {\n                    Id: hiringModel.Id,\n                    data: configObj\n                };\n            } else {\n                hiringModelData[hm] = {\n                    Id: null,\n                    data: {\n                        contactInfo: {\n                            First_Name__c: true,\n                            Last_Name__c: true,\n                            Email__c: true,\n                            Mobile_Phone__c: false,\n                            Street_Address__c: false,\n                            City__c: false,\n                            State_Province__c: false,\n                            Zip_Postal_Code__c: false,\n                            Country__c: false\n                        },\n                        resume: {\n                            isEnabled: false\n                        },\n                        skills: {\n                            isEnabled: false\n                        },\n                        employmentHistory: {\n                            isEnabled: false\n                        },\n                        educationHistory: {\n                            isEnabled: false\n                        }\n                    }\n                };\n            }\n        });\n\n        return Ember.Object.create({\n            general: general,\n            legal: legal,\n            geographies: parsedFormElementsMap.allGeographies,\n            hiringModelPicklistValues: hiringModelPicklistValues,\n            selectedHiringModel: hiringModelPicklistValues[0],\n            selectedGeography: parsedFormElementsMap.allGeographies[0].Id,\n            hiringModelData: hiringModelData,\n            contactInfoFields: contactInfoFields\n        });\n    },\n    afterModel: function(model, transition) {\n        // Since we turned off URL hashing to preserve browser history,\n        // we'll parse the hash manually.\n        if (window.location.hash.indexOf('formElements') !== -1) {\n            var hashArray = window.location.hash.split('/');\n\n            var formElementSection = hashArray[2];\n            var formElementSubSection = hashArray[3];\n            //window.location.hash = '';\n            this.transitionTo('formElements', formElementSection, formElementSubSection);\n        } else {\n            this.transitionTo('contactInfo', model.selectedHiringModel);\n        }\n        /*if (Object.keys(transition.params.application).length === 0 \n                && Object.keys(transition.params.formBuilder).length === 0\n                && Ember.isNone(transition.params.formElements)) {\n            this.transitionTo('contactInfo', model.selectedHiringModel);\n        }*/\n    },\n    actions: {\n        saveHiringModelData: function(modelName, saveAll) {\n            var formBuilderController = this.controllerFor('formBuilder');\n\n            if (formBuilderController.get('isSaving') !== true) {  \n                formBuilderController.set('isSaving', true);\n                formBuilderController.set('showSavingNotification', true);\n\n                if (saveAll !== true) {\n                    var hiringModelDataToSave = this.modelFor('formBuilder').get('hiringModelData')[modelName];\n                \n                    var hiringModelSaveObj = {\n                        Id: hiringModelDataToSave.Id,\n                        Name: modelName,\n                        Configuration_Json__c: JSON.stringify(hiringModelDataToSave.data)\n                    };\n\n                    cont.saveHiringModel(JSON.stringify(hiringModelSaveObj), function(res, evt) {\n                        if (res) {\n                            var parsedResult = parseResult(res);\n\n                            if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                                // Error handling\n                            } else {\n                                hiringModelDataToSave.Id = parsedResult.data.id;\n                                Ember.run.later(this, function() {\n                                    formBuilderController.set('isSaving', false);\n                                    formBuilderController.set('showSavingNotification', false);\n                                }, 1500);\n                            }\n                        } else {\n                            // Error handling\n                        }\n                    });     \n                } else {\n                    var hiringModelData = this.modelFor('formBuilder').get('hiringModelData');\n                    var hiringModelsToSave = [];\n\n                    Object.keys(hiringModelData).forEach(function(hm) {\n                        var hiringModelDataToSave = hiringModelData[hm];\n                        hiringModelsToSave.addObject({\n                            Id: hiringModelDataToSave.Id,\n                            Name: hm,\n                            Configuration_Json__c: JSON.stringify(hiringModelDataToSave.data)\n                        });\n                    });\n\n                    var saveObj = {\n                        hiringModelsToSave: hiringModelsToSave\n                    };\n\n                    cont.saveAllHiringModels(JSON.stringify(saveObj), function(res, evt) {\n                        if (res) {\n                            var parsedResult = parseResult(res);\n\n                            if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                                // Error handling\n                            } else {\n                                //hiringModelDataToSave.Id = parsedResult.data.id;\n                                Ember.run.later(this, function() {\n                                    formBuilderController.set('isSaving', false);\n                                    formBuilderController.set('showSavingNotification', false);\n                                }, 1500);\n                            }\n                        } else {\n\n                        }\n                    });\n                }\n            }\n        }\n    }\n});\n\nApp.FormElementsRoute = Ember.Route.extend({\n    model: function(params) {\n        return this.modelFor('formBuilder').get(params.section.toLowerCase());\n    },\n    beforeModel: function(transition) {\n        var section = transition.params.formElements.section;\n        var subSection = transition.params.formElements.subSection;\n        var formBuilderController = this.controllerFor('formBuilder');\n        var formBuilderModel = this.modelFor('formBuilder');\n\n        App.Fixtures.set('currentSection', transition.params.formElements.section);\n        formBuilderController.set('currentSection', transition.params.formElements.section);\n\n        if (section === 'Legal') {\n            formBuilderModel.set('selectedGeography', subSection);\n        } else {\n            formBuilderModel.set('selectedHiringModel', subSection);\n        }\n        console.log('set params');\n    },\n    actions: {\n        willTransition: function(transition) {\n            this.controllerFor('formBuilder').send('clickSaveAndKeepWorking');\n        }\n    }\n});\n\nApp.ContactInfoRoute = Ember.Route.extend({\n    model: function(params) {\n        App.Fixtures.set('currentSection', null);\n\n        var contactInfoFields = this.modelFor('formBuilder').get('contactInfoFields');\n        var selectedHiringModel = params.hiringModel;\n        var hiringModelData = this.modelFor('formBuilder').get('hiringModelData')[selectedHiringModel].data.contactInfo;\n\n        App.Fixtures.set('currentHiringModel', params.hiringModel);\n\n        var contactInfoObj = {\n            name: [],\n            contact: [],\n            address: []\n        };\n\n        ['name', 'contact', 'address'].forEach(function(fieldSet) {\n            contactInfoFields[fieldSet].forEach(function(f) {\n                contactInfoObj[fieldSet].addObject({\n                    name: f.name,\n                    label: f.label,\n                    isRequired: f.isDBRequired === true || f.isFieldSetRequired === true,\n                    isEnabled: f.isDBRequired === true || f.isFieldSetRequired === true ? true : hiringModelData[f.name] || false\n                });\n            });\n        });\n\n        contactInfoObj.currentHiringModel = params.hiringModel;\n\n        if (!Ember.isNone(this.controllerFor('formBuilder').get('section'))) {\n            this.controllerFor('formBuilder').set('section', null);            \n        }\n\n        return contactInfoObj;\n    },\n    actions: {\n        saveContactInfo: function(selectedHiringModel) {\n            var hiringModelData = this.modelFor('formBuilder').get('hiringModelData')[selectedHiringModel].data.contactInfo;\n            var contactInfoFields = this.modelFor('contactInfo'); \n\n            ['name', 'contact', 'address'].forEach(function(fieldSet) {\n                contactInfoFields[fieldSet].forEach(function(f) {\n                    hiringModelData[f.name] = f.isEnabled;\n                });\n            });\n\n            this.send('saveHiringModelData', selectedHiringModel);\n        },\n        willTransition: function(transition) {\n            var selectedHiringModel = this.modelFor('contactInfo').currentHiringModel;\n            var hiringModelData = this.modelFor('formBuilder').get('hiringModelData')[selectedHiringModel].data.contactInfo;\n            var contactInfoFields = this.modelFor('contactInfo'); \n\n            ['name', 'contact', 'address'].forEach(function(fieldSet) {\n                contactInfoFields[fieldSet].forEach(function(f) {\n                    hiringModelData[f.name] = f.isEnabled;\n                });\n            });\n\n            this.send('saveHiringModelData', selectedHiringModel);\n        }\n    }\n});\n\nApp.ApplicationSectionRoute = Ember.Route.extend({\n    model: function(params) {\n        var section = params.section;\n        var hiringModel = params.hiringModel;\n        var hiringModelData = this.modelFor('formBuilder').get('hiringModelData')[hiringModel].data[section];\n        \n        App.Fixtures.set('currentSection', section);\n        App.Fixtures.set('currentHiringModel', params.hiringModel);\n\n        return hiringModelData;\n    },\n    renderTemplate: function(controller, model) {\n        this.render(App.Fixtures.get('currentSection'), {\n            controller: controller\n        });\n    },\n    actions: {\n        willTransition: function(transition) {\n            var hiringModel = App.Fixtures.get('currentHiringModel');\n\n            this.send('saveHiringModelData', hiringModel);\n        }\n    }\n});\n\nApp.OnePageRoute = Ember.Route.extend({\n    model: function(params) {\n        var hiringModelData = this.modelFor('formBuilder').get('hiringModelData');\n\n        return hiringModelData;\n    },\n    actions: {\n        willTransition: function(transition) {\n            var hiringModels = this.controllerFor('onePage').get('hiringModels');\n            var hiringModelData = this.modelFor('onePage');\n\n            this.send('saveHiringModelData', null, true);\n\n            console.log(this.modelFor('onePage'));\n        }\n    }\n});\n\n// Router\nApp.Router.map(function() {\n    this.resource('formBuilder', { path: '/' }, function() {\n        this.resource('formElements', { path: 'formElements/:section/:subSection' });\n        this.resource('applicationSection', { path: 'application/:section/:hiringModel' });\n        this.resource('contactInfo', { path: 'contactInfo/:hiringModel' });\n        this.resource('employmentHistory', { path: '/employmentHistory' });\n        this.resource('educationHistory', { path: '/educationHistory' });\n        this.resource('onePage', { path: '/onePage' });\n    });\n});\n\n\n// This setting disables the detail routing from showing up in the navbar.\nApp.Router.reopen( {\n    location: 'none'\n});\n\n})();//@ sourceURL=app/to_sectionsFormBuilder.js")

eval("(function() {\n\nApp.SectionCheck = Ember.Mixin.create({\n    isOnJobSpecific: function() {\n        return isOnJobSpecific;\n    }.property()\n});\n\nApp.FormBuilderMixin = Ember.Mixin.create({\n    elementTypes: ['Question', 'Heading', 'Rich Text'],\n    answerTypes: ['Radio Buttons', 'Checkboxes', 'Text Field', 'Paragraph', 'Date'],\n    deletedFormElements: [],\n    deletedAnswerChoices: [],\n    jobTitle: function() {\n        return requisitionJobTitle;\n    }.property(),\n    hasFormElements: function() {\n        return this.get('formElements').length > 1;\n    }.property('formElements'),\n    disableCancel: function() {\n        return this.get('formElements').isAny('isEditing') === true ? 'disabled' : false;\n    }.property('formElements.@each.isEditing'),\n    disableSave: function() {\n        var elements = this.get('formElements')\n            , doesNotHaveFormElements = elements.length === 1 || (elements.length === 2 && elements[1].isNew === true)\n            , isSaving = this.get('isSaving')\n            , isEditing = elements.isAny('isEditing');\n\n        return doesNotHaveFormElements === true || isSaving === true || isEditing === true ? 'disabled' : false; \n    }.property('formElements', 'formElements.@each.isNew', 'isSaving', 'formElements.@each.isEditing'),\n    doesNotHaveFormElements: function() {\n        var elements = this.get('formElements');\n        return elements.length === 1 || (elements.length === 2 && elements[1].isNew === true);\n    }.property('formElements', 'formElements.@each.isNew'),\n    actions: {\n        clickCancel: function() {\n            this.goBackToOrigin();\n        },\n        clickSaveAndClose: function() {\n            this.saveFormElements()\n                .then(this.goBackToOrigin)\n                .then(undefined, this.handleError);\n        },\n        clickSaveAndKeepWorking: function() {\n            var currentPath = this.get('currentPath');\n            // Only perform save if we aren't already saving.\n            // This occurs mostly in the configurator because a user can switch sections quickly.\n            if (this.get('isSaving') !== true) {    \n                this.set('showSavingNotification', true);\n\n                if (currentPath === 'formBuilder.formElements' || Ember.isNone(currentPath)) { \n                    this.saveFormElements()\n                        .then(this.updateObjectsAndKeepWorking)\n                        .then(undefined, this.handleError);\n                } else if (currentPath === 'formBuilder.applicationSection') {\n                    var hiringModel = App.Fixtures.get('currentHiringModel');\n                    console.log(hiringModel)\n                    this.send('saveHiringModelData', hiringModel);\n                } else if (currentPath === 'formBuilder.contactInfo') {\n                    var hiringModel = App.Fixtures.get('currentHiringModel');\n\n                    this.send('saveContactInfo', hiringModel);\n                }\n\n            }   \n        },\n        clickSaveAndPreview: function() {\n            this.saveFormElements()\n                .then(function(self) {\n                    return new Ember.RSVP.Promise(function(resolve, reject) {\n                        if (isSF1 !== true) { \n                            self.set('previewWindow', window.open());\n                        }\n                        resolve(self);\n                    });\n                })\n                .then(this.gotoPreview)\n                .then(undefined, this.handleError);\n        },\n        gotoSection: function(section) {\n            this.set('currentSection', section);\n        }\n    },\n    saveFormElements: function() {\n        var self = this;\n\n        this.set('isSaving', true);\n        \n        var formElementsWithAnswers = [];\n\n        this.get('formElements').forEach(function(fe) { \n            var elementType = fe.get('Element_Type__c')\n                , answerType = fe.get('Answer_Type__c');\n\n            if (elementType === 'Question' && (answerType === 'Radio Buttons' || answerType === 'Checkboxes')) {\n                fe.get('answers').forEach(function(a, i) {\n                    a.set('Sequence_Number__c', i + 1);\n                });\n                formElementsWithAnswers.push(fe);\n            };\n        });\n        \n        var saveObj = {\n            deletedFormElements: this.get('deletedFormElements'),\n            deletedAnswerChoices: this.get('deletedAnswerChoices'),\n            formElements: this.get('formElements').rejectBy('isLast', true),\n            answerChoices: [].concat.apply([], formElementsWithAnswers.getEach('answers').compact())\n        };\n        \n        if (isOnJobSpecific === true) {\n            saveObj.requisitionId = requisitionId;\n            saveObj.allowCandidatesToAssertSkills = this.get('allowCandidatesToAssertSkills');\n        }\n\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n            cont.saveFormElementsJson(JSON.stringify(saveObj), function(res, resObj) {\n                if (res) {\n                    var parsedResult = parseResult(res);\n\n                    if (!Ember.isEmpty(parsedResult.errorMessages)) {\n                        self.set('error', parsedResult.errorMessages[0]);\n                        reject(self);\n                    } else {\n                        self.set('ajaxResult', parsedResult);\n                        resolve(self);\n                    }\n                } else {\n                    self.set('error', resObj.message);\n                    reject(self);\n                }\n            });\n        });\n    },\n    handleError: function(self) {\n        console.log(self.get('error'));\n        var previewWindow = self.get('previewWindow');\n\n        if (!Ember.isNone(previewWindow)) {\n            previewWindow.close();\n        }\n        self.setProperties({\n            errorMessage: self.get('error'),\n        });\n\n        $(window).scrollTop(0);\n    },\n    goBackToOrigin: function(self) {\n        var target = isOnJobSpecific === true ? requisitionId : listViewPrefix;\n\n        if (isSF1 === true && isOnJobSpecific === true) {\n            sforce.one.navigateToSObject(target);\n        } else {\n            window.location.href = '/' + target;\n        }\n    },\n    gotoPreview: function(self) {\n        if (isSF1 === true) {\n            sforce.one.navigateToUrl('/apex/to_applicationFormPreview?id=' + requisitionId);\n        } else {\n            var previewWindow = self.get('previewWindow');\n            var jobOfferPreviewUrl;\n\n            if (typeof requisitionId !== 'undefined' && !Ember.isEmpty(requisitionId)) {\n                jobOfferPreviewUrl = window.location.protocol + '//' + window.location.host + '/apex/to_applicationFormPreview?id=' + requisitionId;\n            } else {\n                jobOfferPreviewUrl = window.location.protocol + '//' + window.location.host + '/apex/to_applicationFormPreview';                \n            }\n            \n            previewWindow.location = jobOfferPreviewUrl;\n            self.set('isSaving', false);\n        }\n    },\n    updateObjectsAndKeepWorking: function(self) {\n        var eIdsMap = self.get('ajaxResult').data.eIdsMap;\n        self.get('formElements').rejectBy('isLast', true).forEach(function(fe) {\n            var elementType = fe.get('Element_Type__c');\n            var answerType = fe.get('Answer_Type__c');\n\n            if (Ember.isEmpty(fe.get('Id'))) {\n                fe.set('Id', eIdsMap.formElements[fe.get('eId')].Id);\n            }\n\n            if (elementType === 'Question' && (answerType === 'Radio Buttons' || answerType === 'Checkboxes')) {\n                fe.get('answers').forEach(function(a) {\n                    a.setProperties({\n                        Id: eIdsMap.answerChoices[a.get('eId')].Id,\n                        Form_Element__c: fe.get('Id')\n                    });\n                });\n            }\n        });\n\n        Ember.run.later(this, function() {\n            self.setProperties({\n                showSavingNotification: false,\n                isSaving: false\n            })\n        }, 1500);\n    }\n});\n\nApp.FormElementsMixin = Ember.Mixin.create({\n    needs: ['formBuilder'],\n    currentSectionBinding: 'controllers.formBuilder.currentSection',\n    sortAscending: true,\n    isInEditMode: function() {\n        return this.isAny('isEditing', true);\n    }.property('@each.isEditing'),\n    hasFormElements: function() {\n        return this.get('model').length > 1;\n    }.property('[]'),\n    actions: {\n        swapFormElements: function(sequenceNumber1, sequenceNumber2) {\n            var formElements = this.get('model')\n                , sequenceProperty = 'Sequence_Number__c'\n                , formElement1 = formElements.findBy(sequenceProperty, sequenceNumber1)\n                , formElement2 = formElements.findBy(sequenceProperty, sequenceNumber2);\n\n            if (!Ember.isNone(formElement1) && !Ember.isNone(formElement2)\n                    && formElement1.get('isLast') !== true && formElement2.get('isLast') !== true) {\n                formElement1.set(sequenceProperty, sequenceNumber2);\n                formElement2.set(sequenceProperty, sequenceNumber1);\n            }\n        }\n    }\n});\n\nApp.FormElementMixin = Ember.Mixin.create({\n    needs: ['formBuilder'],\n    isInEditModeBinding: 'parentController.isInEditMode',\n    elementTypesBinding: 'controllers.formBuilder.elementTypes',\n    answerTypesBinding: 'controllers.formBuilder.answerTypes',\n    formElementsBinding: 'controllers.formBuilder.formElements',\n    currentSectionBinding: 'controllers.formBuilder.currentSection',\n    isQuestionType: Ember.computed.equal('Element_Type__c', 'Question'),\n    answersToDelete: [],\n    maxRichTextLength: 6000,\n    isAtMaxElements: function() {\n        return this.get('parentController.model').length >= 101;\n    }.property('parentController.[]'),\n    previewTemplate: function() {\n        var elementType = this.get('Element_Type__c')\n            , answerType = this.get('Answer_Type__c')\n            , previewTemplate = elementType === 'Question' ? 'preview-' + answerType : 'preview-' + elementType;\n        return previewTemplate.camelize();\n    }.property('Element_Type__c', 'Answer_Type__c'),\n    editTemplate: function() {\n        var editTemplate = 'edit-'\n            , elementType = this.get('Element_Type__c')\n            , answerType = this.get('Answer_Type__c');\n\n        if (!Ember.isNone(elementType)) {\n            if (elementType === 'Question') {\n                if (Ember.isNone(answerType)) {\n                    answerType = 'Radio Buttons',\n                    this.set('Answer_Type__c', 'Radio Buttons');\n                }\n                editTemplate += answerType;\n                return editTemplate.camelize();\n\n            } else if (elementType !== 'Question') {\n                editTemplate += elementType;\n                return editTemplate.camelize();\n            }\n        }\n    }.property('Element_Type__c', 'Answer_Type__c'),\n    divId: function() {\n        return 'formElement' + this.get('eId');\n    }.property('eId'),\n    doesNotHaveEnoughInfo: function() {\n        var Text__c = this.get('Text__c')\n            , populatedAnswers = this.get('answers').filter(function(a) { return !Ember.isEmpty(a.Value__c); })\n            , Element_Type__c = this.get('Element_Type__c')\n            , Answer_Type__c = this.get('Answer_Type__c')\n            , Rich_Text_Content__c = this.get('Rich_Text_Content__c');\n\n        return (Element_Type__c !== 'Rich Text' && Ember.isEmpty(Text__c)) \n                    || (Element_Type__c === 'Rich Text' && Ember.isEmpty(Rich_Text_Content__c)) \n                    || ((Element_Type__c === 'Question' && (Answer_Type__c === 'Radio Buttons' || Answer_Type__c === 'Checkboxes')) \n                            && Ember.isEmpty(populatedAnswers));\n    }.property('Rich_Text_Content__c', 'Text__c', 'answers', 'Element_Type__c', 'Answer_Type__c', 'answers.@each.Value__c'),\n    isAtMaxAnswers: function() {\n        return this.get('answers').length === 20;\n    }.property('answers'),\n    elementTypeDidChange: function() {\n        this.focusOnInput();\n    }.observes('Element_Type__c'),\n    actions: {\n        clickDone: function() {\n            var Element_Type__c = this.get('Element_Type__c')\n                , Answer_Type__c = this.get('Answer_Type__c')\n                , answers = this.get('answers')\n                , parentController = this.get('parentController')\n                , formBuilderController = this.get('controllers.formBuilder')\n                , answersToDelete = this.get('answersToDelete')\n                , maxRichTextLength = this.get('maxRichTextLength')\n                , valid = true;\n\n            this.set('errorMessage', null);\n\n            // parse out the rich text content if it's of that type and empty out non-associated fields.\n            if (Element_Type__c === 'Rich Text') {\n                var richText = $('#' + this.get('componentId')).find('iframe').contents().find('body');\n\n                richText.find('[style]').removeAttr('style');\n                richText.find('[class]').removeAttr('class');\n\n                var richTextContent = richText.html();\n\n                // Verify rich text length\n\n                if (richTextContent.length > maxRichTextLength) {\n                    this.set('errorMessage', labels.pleaseReduceTheAmountOfContent);\n                    valid = false;\n                } else {\n                    this.setProperties({\n                        Rich_Text_Content__c: richText.html(),\n                        Text__c: null\n                    });\n                }\n            } else {\n                this.set('Rich_Text_Content__c', null);\n            }\n\n            if (valid !== false) {\n                // add any answers marked to delete to the deletedAnswerChoices array\n                if (!Ember.isEmpty(answersToDelete)) {\n                    formBuilderController.get('deletedAnswerChoices').addObjects(answersToDelete);\n                }\n\n                // clear out answer choices if we're hitting 'Done' on a non-radio/checkbox type.\n                if (Element_Type__c !== 'Question' || (Answer_Type__c !== 'Radio Buttons' && Answer_Type__c !== 'Checkboxes')) {\n                    formBuilderController.get('deletedAnswerChoices').addObjects(answers.getEach('Id')).compact();\n\n                    this.setProperties({\n                        Answer_Type__c: Element_Type__c !== 'Question' ? null : Answer_Type__c,\n                        answers: [Ember.Object.create({\n                            eId: EID++,\n                            formElementEId: this.get('eId'),\n                            Value__c: null,\n                            Score__c: 0,\n                            Disqualify__c: false\n                        })]\n                    });\n                }\n\n                // clear out any answers that were left empty. If a user blanked out a saved answer, consider that deleted.\n                if (Element_Type__c === 'Question' && (Answer_Type__c === 'Radio Buttons' || Answer_Type__c === 'Checkboxes')) {\n                    var emptyAnswers = this.get('answers').filter(function(a) { \n                        return Ember.isEmpty(a.Value__c);\n                    });\n                    formBuilderController.get('deletedAnswerChoices').addObjects(emptyAnswers.getEach('Id'));\n                    this.get('answers').removeObjects(emptyAnswers);\n                }\n\n                this.setProperties({\n                    isEditing: false,\n                    isNew: false\n                });\n            }\n        },\n        clickCancel: function() {\n            var tempObject = this.get('parentController.tempObject');\n\n            // clear out any answers set to be deleted\n            this.get('answersToDelete').clear();\n\n            if (this.get('isNew') === true) {\n                this.deleteMe();    \n            } else if (this.get('isEditing') === true && this.get('isLast') !== true) {\n                this.set('isEditing', false);\n\n                if (tempObject.Element_Type__c === 'Question' && \n                        (tempObject.Answer_Type__c === 'Radio Buttons' || tempObject.Answer_Type__c === 'Checkboxes')) {\n                    var tempAnswers = [];\n\n                    // When restoring the original object on cancel, make sure to turn answers into ember objects.\n                    tempObject.answers.forEach(function(a) {\n                        tempAnswers.push(Ember.Object.create(a));\n                    });\n\n                    tempObject.answers = tempAnswers;\n                }\n\n                // Restore object to what it was before edit.\n                this.setProperties(tempObject);\n            }\n        },\n        clickNew: function() {\n            if (!this.get('isInEditMode')) {\n                var formBuilderController = this.get('controllers.formBuilder')\n                    , formElements = this.get('parentController').get('model')\n                    , formElementEId = EID++\n                    , currentSection = this.get('currentSection')\n                    , sequenceProperty = 'Sequence_Number__c'\n                    , sequenceNumber = this.get(sequenceProperty)\n                    , selectedHiringModel = formBuilderController.get('selectedHiringModel')\n                    , selectedGeography = formBuilderController.get('selectedGeography');\n\n                formElements.forEach(function(fe, i) {\n                    if (fe.get(sequenceProperty) >= sequenceNumber) {\n                        fe.incrementProperty(sequenceProperty);\n                    }\n                });\n\n                formElements.addObject(Ember.Object.create({\n                    eId: formElementEId,\n                    isNew: true,\n                    isEditing: true,\n                    Requisition__c : isOnJobSpecific === true ? requisitionId : null,\n                    Sequence_Number__c: sequenceNumber,\n                    Element_Type__c: 'Question',\n                    Answer_Type__c: 'Radio Buttons',\n                    Text__c: null,\n                    Section__c: currentSection,\n                    Geography__c: currentSection === 'Legal' ? selectedGeography : null,\n                    Hiring_Model__c: currentSection === 'General' ? selectedHiringModel : null,\n                    Source_Position__c: typeof positionId !== 'undefined' ? positionId : null,\n                    Original__c: isOnJobSpecific === true ? true : false,\n                    answers: [Ember.Object.create({\n                        eId: EID++,\n                        formElementEId: formElementEId,\n                        Value__c: null,\n                        Score__c: 0,\n                        Disqualify__c: false\n                    })]\n                }));\n\n                formBuilderController.notifyPropertyChange('formElements');\n\n                this.scrollToElement('.edit-this');\n                this.focusOnInput();\n            }\n        },\n        clickEdit: function() {\n            var currentState = this.get('model');\n            var tempObject = {};\n            // Create a copy of the form element\n            tempObject = JSON.parse(JSON.stringify(currentState));\n\n            this.get('parentController').set('tempObject', tempObject);\n            this.set('isEditing', true);\n            this.scrollToElement('.edit-this');\n            this.focusOnInput();\n        },\n        clickMoveUp: function() {\n            var currentSequenceNumber = this.get('Sequence_Number__c');\n\n            this.send('swapFormElements', currentSequenceNumber, currentSequenceNumber - 1);\n            this.scrollToElement('#' + this.get('divId'), -30, true);\n        },\n        clickMoveDown: function() {\n            var currentSequenceNumber = this.get('Sequence_Number__c');            \n\n            this.send('swapFormElements', currentSequenceNumber, currentSequenceNumber + 1);\n            this.scrollToElement('#' + this.get('divId'), -30, true);\n        },\n        clickDelete: function() {\n            this.set('shouldConfirmDelete', true);\n        },\n        clickConfirmDelete: function() {\n            this.deleteMe();\n        },\n        clickCancelDelete: function() {\n            this.set('shouldConfirmDelete', false);\n        },\n\n        // answer specific actions\n        clickAddAnswer: function() {\n            if (!this.get('isAtMaxAnswers')) {\n                this.get('answers').addObject(Ember.Object.create({\n                    eId: EID++,\n                    formElementEId: this.get('eId'),\n                    Value__c: null,\n                    Score__c: 0,\n                    Disqualify__c: false\n                }));\n                this.notifyPropertyChange('answers');\n\n                Ember.run.scheduleOnce('afterRender', this, function() {\n                    $('.answerInput:last').focus();\n                });\n            }\n        }\n    },\n\n    focusOnInput: function() {\n        Ember.run.scheduleOnce('afterRender', this, function() {\n            $('.edit-this').find('.elementInput').focus();\n        });\n    },\n    deleteMe: function() {\n        var formBuilderController = this.get('controllers.formBuilder')\n            , formElements = this.get('parentController').get('model')\n            , sequenceProperty = 'Sequence_Number__c'  \n            , sequenceNumber = this.get(sequenceProperty);\n\n        if (!Ember.isNone(this.get('Id'))) {\n            formBuilderController.get('deletedFormElements').addObject(this.get('Id'));\n        }\n\n        this.set('isEditing', false);\n        formElements.removeObject(this.get('model'));\n\n        formElements.forEach(function(fe, i) {\n            var feSequenceNumber = fe.get(sequenceProperty);\n            if (!Ember.isEmpty(feSequenceNumber) && feSequenceNumber > sequenceNumber) {\n                fe.decrementProperty(sequenceProperty);\n            }\n        });\n\n        if (isOnJobSpecific !== true) {\n            formBuilderController.notifyPropertyChange('general');\n            formBuilderController.notifyPropertyChange('legal');\n        }\n    },\n    scrollToElement: function(elementQuery, paddingAmount, usePrev) {\n        Ember.run.scheduleOnce('afterRender', this, function() {\n            var element = usePrev === true ? $(elementQuery).prev('div') : $(elementQuery);\n\n            if ($(element).length > 0) {\n                var scrollToPosition = $(element).offset().top;\n\n                if (paddingAmount) {\n                    scrollToPosition += paddingAmount;\n                }\n\n                $('html, body').animate({\n                    scrollTop: scrollToPosition\n                }, 300);\n            }\n        });\n    }\n});\n\nApp.AnswerMixin = Ember.Mixin.create({\n    needs: ['formBuilder'],\n    isThumbsDown: Ember.computed.equal('Score__c', -1),\n    isThumbsUp: Ember.computed.equal('Score__c', 1),\n    isDisqualify: Ember.computed.equal('Disqualify__c', true),\n    actions: {\n        clickVote: function(vote) {\n            var currentScore = this.get('Score__c')\n                , currentDisqualify = this.get('Disqualify__c');\n\n            if (vote === 'upVote') {\n                this.setProperties({\n                    Score__c: currentScore === 1 ? 0 : 1,\n                    Disqualify__c: false\n                });\n            } else if (vote === 'downVote') {\n                this.setProperties({\n                    Score__c: currentScore === -1 ? 0 : -1,\n                    Disqualify__c: false\n                });\n            } else if (vote === 'disqualify') {\n                this.set('Score__c', 0);\n                this.toggleProperty('Disqualify__c');\n            }\n        },\n        clickDelete: function() {\n            var parentController = this.get('parentController');\n\n            parentController.get('answers').removeObject(this.get('model'));\n\n            if(!Ember.isNone(this.get('Id'))) {\n                parentController.get('answersToDelete').addObject(this.get('Id'));\n            }\n            parentController.notifyPropertyChange('answers');\n        }\n    }\n});\n\n})();//@ sourceURL=../../js/formBuilderMixins.js")

eval("(function() {\n\nApp.ApplicationController = Ember.Controller.extend({\n\n});\n\n// Controllers\nApp.FormBuilderController = Ember.ObjectController.extend(App.FormBuilderMixin, App.SectionCheck, {\n    needs: ['application', 'applicationSection'],\n    currentPathBinding: 'controllers.application.currentPath',\n    sectionBinding: 'controllers.applicationSection.section',\n    currentSection: 'General',\n    isInGeneral: function() {\n        return App.Fixtures.get('currentSection') === 'General';\n    }.property('App.Fixtures.currentSection'),\n    isInLegal: function() {\n        return App.Fixtures.get('currentSection') === 'Legal';\n    }.property('App.Fixtures.currentSection'),\n    isInOnePage: function() {\n        console.log(this.get('currentPath'));\n        return this.get('currentPath') === 'formBuilder.onePage';\n    }.property('currentPath'),\n    formElements: function() {\n        return this.get('general').concat(this.get('legal'));\n    }.property('general', 'legal'),\n    hiringModelDidChange: function() {\n        var currentPathString = this.get('currentPath');\n        if (!Ember.isNone(currentPathString)) {\n            var currentPath = currentPathString.split('.')[1];\n            var currentSection = App.Fixtures.get('currentSection');\n            var selectedHiringModel = this.get('selectedHiringModel');\n\n            if (currentPath === 'formElements' || Ember.isNone(currentSection)) {\n                this.transitionToRoute(currentPath, selectedHiringModel);\n            } else {\n                this.transitionToRoute(currentPath, currentSection, selectedHiringModel);\n            }\n\n        }\n    }.observes('selectedHiringModel'),\n    geographyDidChange: function() {\n        var currentPathString = this.get('currentPath');\n\n        if (!Ember.isNone(currentPathString)) {\n            var currentPath = currentPathString.split('.')[1];\n            var currentSection = App.Fixtures.get('currentSection');\n            var selectedGeography = this.get('selectedGeography');\n\n            if (currentPath === 'formElements') {\n                this.transitionToRoute(currentPath, selectedGeography);\n            }\n        }\n\n    }.observes('selectedGeography')\n});\n\nApp.FormElementsController = Ember.ArrayController.extend(App.FormElementsMixin, App.SectionCheck, {\n    isInGeneralBinding: 'controllers.formBuilder.isInGeneral',\n    isInLegalBinding: 'controllers.formBuilder.isInLegal',    \n    selectedHiringModelBinding: 'controllers.formBuilder.selectedHiringModel',\n    selectedGeographyBinding: 'controllers.formBuilder.selectedGeography',\n    hasFormElements: function() {\n        return this.get('formElementsToDisplay').length > 1;\n    }.property('formElementsToDisplay'),\n    formElementsToDisplay: function() {\n        var currentSection = this.get('currentSection')\n            , selectedHiringModel = this.get('selectedHiringModel')\n            , selectedGeography = this.get('selectedGeography')\n            , arrangedContent = this.get('arrangedContent');\n\n        if (currentSection === 'General') {\n            return arrangedContent.filter(function(fe) {\n                return fe.Hiring_Model__c === selectedHiringModel || fe.isLast === true || fe.isNew === true;\n            });\n        } else if (currentSection === 'Legal') {\n            return arrangedContent.filter(function(fe) {\n                return fe.Geography__c === selectedGeography || fe.isLast === true || fe.isNew === true;\n            });\n        }\n    }.property('currentSection', 'selectedHiringModel', 'selectedGeography', 'arrangedContent', '[]'),\n    sortProperties: ['Sequence_Number__c']\n});\n\nApp.FormElementController = Ember.ObjectController.extend(App.FormElementMixin, App.SectionCheck, {\n    isInGeneralBinding: 'controllers.formBuilder.isInGeneral',\n    isInLegalBinding: 'controllers.formBuilder.isInLegal',\n    isQuestionType: Ember.computed.equal('Element_Type__c', 'Question'),\n    sectionDidChange: function() {\n        if (this.get('isInEditMode') === true) {\n            this.send('clickCancel');\n        }\n    }.observes('currentSection')\n});\n\nApp.AnswerController = Ember.ObjectController.extend(App.AnswerMixin, App.SectionCheck, {\n    isInLegalBinding: 'controllers.formBuilder.isInLegal'\n});\n\nApp.ApplicationSectionController = Ember.ObjectController.extend({\n    employmentHistoryYears: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n});\n\nApp.FieldController = Ember.ObjectController.extend({\n    isRequired: function() {\n        console.log(this.get('model'));\n        console.log(this.get('isDBRequired'));\n        console.log(this.get('isFieldSetRequired'));\n        return this.get('isDBRequired') === true || this.get('isFieldSetRequired') === true;\n    }.property('isDBRequired', 'isFieldSetRequired')\n});\n\nApp.OnePageController = Ember.ObjectController.extend({\n    hiringModels: function() {\n        var hiringModelData = this.get('model');\n        var hiringModels = [];\n\n        Object.keys(hiringModelData).forEach(function(hm) {\n            hiringModels.addObject({\n                name: hm,\n                isOnePage: hiringModelData[hm].isOnePage\n            });\n        });\n\n        return hiringModels;\n    }.property(),\n    isOnePageDidChange: function() {\n        console.log('a');\n        console.log(this.get('model'));\n        var model = this.get('model');\n        this.get('hiringModels').forEach(function(hm){\n            model[hm.name].data.isOnePage = hm.isOnePage;\n        });\n    }.observes('hiringModels.@each.isOnePage')\n});\n\n})();//@ sourceURL=app/to_sectionsFormBuilderControllers.js")

eval("(function() {\n\n// Standard JUI date picker component\n// Usage: {{date-picker value=[date value to bind to your controller]}}\nApp.DatePickerComponent = Ember.Component.extend({\n    attributeBindings: ['includeToday', 'disabled'],\n    layoutName: 'components/datepicker',\n    didInsertElement: function() {\n\n        var self = this\n            , dateValue = this.get('value')\n            , disabled = this.get('disabled')\n            , currentDate = moment()\n            , includeToday = this.get('includeToday')\n            , $element = this.$()\n            , $datepicker = $element.find('.datepicker')\n            , $input = $element.find('input')\n            , locale = typeof localeString === 'undefined' ? 'YYYY-MM-DD' : localeString;\n\n            $datepicker.datepicker({\n                    format: locale.toLowerCase(),\n                    onRender: function(date) {\n                        if (disabled === true) {\n                            return 'disabled';\n\n                        } else {\n                            if (includeToday === true) \n                                return date.valueOf() < moment(currentDate).subtract('days', 1).valueOf() ? 'disabled' : '';\n                        }\n                    }\n                })\n                .on('changeDate', function(event) {\n                    self.set('value', moment(event.date).format('YYYY-MM-DD'));\n                    $input.val(moment(event.date).format(locale));\n                   \n                    $datepicker.datepicker('hide');\n                })\n                // .datepicker('setValue', moment(dateValue).toDate());\n\n            if (!Ember.isNone(dateValue)) {\n                $input.val(moment(dateValue).format(locale));\n                $datepicker.datepicker('setValue', moment(dateValue).toDate());\n            }\n    }\n});\n\n// Salesforce Rich Text Editor component\n// Usage: In the body tag of the VF page you are editing, insert an apex rich text tag inside a div with id 'richTextForm'\n// then in your template: {{rich-text componentId=[this elements id if you need it] value=[rich text to bind to your controller]}}\n// Attributes:\n// componentId - This is the Id of the element you have created, can be useful if you need to jQuery for it.\n// bindingType - You can specify the component to bind its 'value' property to the 'html' or 'text' content of the rich text field.\n//               If unspecified, it will not bind at all.\n// autofocus - Whether the cursor should autofocus on the component when it is added to the DOM.\nApp.RichTextComponent = Ember.Component.extend({\n    attributeBindings: ['componentId', 'bindingType', 'autofocus', 'height'],\n    previousContent: '',\n    didInsertElement: function() {\n        var self = this\n            , richTextForm= $('#richTextForm')\n            , value = this.get('value')\n            , bindingType = this.get('bindingType')\n            , autofocus = this.get('autofocus')\n            , height = this.get('height')\n            , pollCounter = 0; // We should set a max amount of polling incase the component launches but the user switches the view right away.\n\n        richTextForm.find('.cke').remove();\n        this.$().append(richTextForm.html());\n        this.set('componentId', this.get('elementId'));\n\n        // We have to constantly poll for Salesforce to finish rendering the rich text field before updating its value.\n        var pollForRTF = setInterval(function(){ \n            pollCounter++;\n\n            if (pollCounter > 50) {\n                clearInterval(pollForRTF);\n            }\n\n            if (!Ember.isEmpty(self.$())) { // A little more checking in case user navigates to another view right away\n                var rtfField = self.$().find('iframe').contents();\n\n                if (rtfField.length > 0 && rtfField.find('body').length > 0) {\n                    clearInterval(pollForRTF);\n                    \n                    // This run later and re-finding of the body is a mod to make the RTF values populate in Firefox\n                    Ember.run.later(this, function() {\n                        if (!Ember.isEmpty(self.$())) { // A little more checking in case user navigates to another view right away\n                        \n                            var rtfBody = self.$().find('iframe').contents().find('body');\n                            if (autofocus === true) {\n                                rtfBody.focus();\n                            }\n\n                            if (!Ember.isNone(value)) {\n                                rtfBody.html(value);\n                            }\n                            \n                            if (!Ember.isNone(height)) {\n                                self.$().find('.cke_contents').height(height);\n                            }\n\n                            if (bindingType === 'html') {\n                                rtfBody.keyup(function(e) {\n                                    var richText = $(e.target);\n\n                                    richText.find('[style]').removeAttr('style');\n                                    richText.find('[class]').removeAttr('class');\n\n                                    var currentContent = richText.html();\n                                    var previousContent = self.get('previousContent');\n\n                                    self.set('value', currentContent);\n                                    self.set('previousContent', currentContent);\n                                });\n                            } else if (bindingType === 'text') {\n                                rtfBody.keyup(function(e) {\n                                    var richText = $(e.target);\n\n                                    richText.find('[style]').removeAttr('style');\n                                    richText.find('[class]').removeAttr('class');\n\n                                    var currentContent = richText.html();\n                                    var previousContent = self.get('previousContent');\n\n                                    self.set('value', e.target.textContent);\n                                    self.set('previousContent', currentContent);\n                                });\n                            }\n                        }\n                    }, 300);\n                }\n            }\n        }, 300);\n    }\n});\n\n})();//@ sourceURL=../../js/emberComponents.js")

eval("(function() {\n\n// This function takes a number and adds commas for every hundredth value.\nfunction ReplaceNumberWithCommas(yourNumber) {\n    //Seperates the components of the number\n    var n= yourNumber.toString().split(\".\");\n    //Comma-fies the first part\n    n[0] = n[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    //Combines the two sections\n    return n.join(\".\");\n}\n\nfunction parseResult(result) {\n    return JSON.parse($('<div>').html(result).text());\n}\n\n/*\n\tgetDepndentOptions will make a describe call to SF and return an object with the fields the dependent picklist\n\tis dependent on. The function needs the VF page to have the following scripts to work\n\n\t<apex:includeScript value=\"/soap/ajax/30.0/connection.js\"/>\n\t<apex:includeScript value=\"/soap/ajax/30.0/apex.js\"/>\n*/\n\nfunction getDependentOptions (apiKey, objName, ctrlFieldName, depFieldName, namespace) {\n\tsforce.connection.sessionId = apiKey\n    if(namespace){\n        objName = namespace + objName;\n        ctrlFieldName = namespace + ctrlFieldName;\n        depFieldName = namespace + depFieldName;\n    }\n\n    // Isolate the Describe info for the relevant fields\n    var objDesc = sforce.connection.describeSObject(objName);\n    var ctrlFieldDesc, depFieldDesc;\n    var found = 0;\n    for (var i=0; i<objDesc.fields.length; i++) {\n        var f = objDesc.fields[i];\n        if (f.name == ctrlFieldName) {\n            ctrlFieldDesc = f;\n            found++;\n        } else if (f.name == depFieldName) {\n            depFieldDesc = f;\n            found++;\n        }\n        if (found==2) break; \n    }\n \n    // Set up return object\n    var dependentOptions = {};\n\n    var ctrlValues = ctrlFieldDesc.picklistValues;\n    for (var i=0; i<ctrlValues.length; i++) {\n        dependentOptions[ctrlValues[i].label] = [];\n    }\n \n    var base64 = new sforce.Base64Binary(\"\");\n    function testBit (validFor, pos) {\n        var byteToCheck = Math.floor(pos/8);\n        var bit = 7 - (pos % 8);\n        return ((Math.pow(2, bit) & validFor.charCodeAt(byteToCheck)) >> bit) == 1;\n    }\n    \n    // For each dependent value, check whether it is valid for each controlling value\n    var depValues = depFieldDesc.picklistValues;\n    for (var i=0; i<depValues.length; i++) {\n        var thisOption = depValues[i];\n        var validForDec = base64.decode(thisOption.validFor);\n        for (var ctrlValue=0; ctrlValue<ctrlValues.length; ctrlValue++) {\n            if (testBit(validForDec, ctrlValue)) {\n                dependentOptions[ctrlValues[ctrlValue].label].push(thisOption.label);\n            }\n        }\n    }\n    return dependentOptions;\n}\n\n})();//@ sourceURL=../../js/toHelpers.js")